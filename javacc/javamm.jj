/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. javamm.jj */
/*@egen*/options
{
 LOOKAHEAD=1;
}
PARSER_BEGIN(Javamm)
public class Javamm/*@bgen(jjtree)*/implements JavammTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTJavammState jjtree = new JJTJavammState();

/*@egen*/
    public static void main(String args[]) throws ParseException {

        Javamm myJavamm = new Javamm(System.in);
        SimpleNode root = myJavamm.JavaMM(); // returns reference to root node

        //System.out.println("Expression value: "+myJavamm.eval(root));

        root.dump(""); // prints the tree on the screen
    }
}
PARSER_END(Javamm)

SKIP :
{                                   
" " | "\r" | "\t" | "\n"
|
<"//" (~["\n", "\r"])* ("\n" | "\r")>
|
<"/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
}

TOKEN: 
{
      < IMPORT : "import" > 
    | < PUBLIC : "public" >
    | < RETURN: "return" >
    | < CLASS: "class" >
    | < EXTENDS: "extends" >
    | < IF: "if" >
    | < ELSE: "else" >
    | < WHILE: "while" > 
    | < STATIC: "static" >
    | < MAIN: "main" >
    
    //Brackets
    | < LEFTBRACKET : "{" >
    | < RIGHTBRACKET : "}" >
    | < SQUARERIGHTBRACKET : "]" >
    | < SQUARELEFTBRACKET : "[" >
    | < LEFTPARENTHESES : "(" >
    | < RIGHTPARENTHESES : ")" >
    | < COMMA : "," >
    | < DOT : "." >
    | < SEMICOLON : ";" >
    | < EQUAL: "=" >

    //Operations
    | < AND: "&&" >
    | < LESS: "<" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < MULT: "*" >
    | < DIV: "/" >
    | < TRUE: "true" >
    | < FALSE: "false" >
    | < NEG: "!" >

    //Special
    | < THIS: "this" >
    | < NEW: "new" >
    | < LENGTH: "length" >

    //Types
    | < BOOLEAN: "boolean" >
    | < INT: "int" >
    | < STRING: "String" >
    | < VOID: "void" >

    // Java valid identifiers / literals
    | < IDENTIFIER : (["_", "$"])(["a"-"z", "A"-"Z", "0"-"9", "_", "$"])+ | ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9", "_", "$"])* >
    | < INTEGERLITERAL : ("0" | (["1"-"9"](["0"-"9"])*) | ("0x"(["0"-"9","a"-"f","A"-"F"])+) | ("0b"(["0","1"])+)) >
}

SimpleNode JavaMM() : {/*@bgen(jjtree) JavaMM */
  SimpleNode jjtn000 = new SimpleNode(JJTJAVAMM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JavaMM */
    try {
/*@egen*/
    (ImportDeclaration())* (ClassDeclaration())+ <EOF>/*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                       }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ // Java code inside brackets
}

void ImportDeclaration() : {/*@bgen(jjtree) ImportDeclaration */
                            SimpleNode jjtn000 = new SimpleNode(JJTIMPORTDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ImportDeclaration */
    try {
/*@egen*/
    <IMPORT> [<STATIC>] t=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                                      {
                                        SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIER);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                      }
                                      try {
/*@egen*//*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn001, true);
                                        jjtc001 = false;
                                      }
/*@egen*/{jjtn001.jjtSetVal(t.image);}/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001, true);
                                        }
                                      }
/*@egen*/             ImportDeclaration1()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ImportDeclaration1()      : {Token d, i, l, r, s;} 
{
    d=<DOT>/*@bgen(jjtree) Dot */
           {
             SimpleNode jjtn001 = new SimpleNode(JJTDOT);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
           }
/*@egen*/{jjtn001.jjtSetVal(d.image);}/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/     
    i=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                  {
                    SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFIER);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                  }
/*@egen*/{jjtn002.jjtSetVal(i.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
                  }
/*@egen*/             
    ImportDeclaration1()
    | 
    [
        l=<LEFTPARENTHESES>/*@bgen(jjtree) LeftParentheses */
                           {
                             SimpleNode jjtn003 = new SimpleNode(JJTLEFTPARENTHESES);
                             boolean jjtc003 = true;
                             jjtree.openNodeScope(jjtn003);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn003, true);
                             jjtc003 = false;
                           }
/*@egen*/{jjtn003.jjtSetVal(l.image);}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc003) {
                               jjtree.closeNodeScope(jjtn003, true);
                             }
                           }
/*@egen*/                 
        [ TypeImport() ImportDeclaration2() ] 
        r=<RIGHTPARENTHESES>/*@bgen(jjtree) RightParentheses */
                            {
                              SimpleNode jjtn004 = new SimpleNode(JJTRIGHTPARENTHESES);
                              boolean jjtc004 = true;
                              jjtree.openNodeScope(jjtn004);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn004, true);
                              jjtc004 = false;
                            }
/*@egen*/{jjtn004.jjtSetVal(r.image);}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004, true);
                              }
                            }
/*@egen*/                  
        [ TypeImport() ]
    ] 
    s=<SEMICOLON>/*@bgen(jjtree) Semicolon */
                 {
                   SimpleNode jjtn005 = new SimpleNode(JJTSEMICOLON);
                   boolean jjtc005 = true;
                   jjtree.openNodeScope(jjtn005);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn005, true);
                   jjtc005 = false;
                 }
/*@egen*/{jjtn005.jjtSetVal(s.image);}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc005) {
                     jjtree.closeNodeScope(jjtn005, true);
                   }
                 }
/*@egen*/           
}

void ImportDeclaration2()      : {Token s;}
{
    [
        s=<COMMA>/*@bgen(jjtree) Comma */
                 {
                   SimpleNode jjtn001 = new SimpleNode(JJTCOMMA);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
                 }
/*@egen*/{jjtn001.jjtSetVal(s.image);}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
                 }
/*@egen*/        
        TypeImport() ImportDeclaration2()
    ]
}

void TypeImport()      : {Token t;}
{
    Type() | t=<VOID>/*@bgen(jjtree) TypeImport */
                     {
                       SimpleNode jjtn001 = new SimpleNode(JJTTYPEIMPORT);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
                     }
/*@egen*/{jjtn001.jjtSetVal(t.image);}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                       }
                     }
/*@egen*/            

}

void Type()      : {Token t;}
{
    (t=<BOOLEAN>| 
     t=<STRING> | 
     t=<INT> [<SQUARELEFTBRACKET> <SQUARERIGHTBRACKET>]
    )/*@bgen(jjtree) Type */
     {
       SimpleNode jjtn001 = new SimpleNode(JJTTYPE);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
     }
     try {
/*@egen*//*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn001, true);
       jjtc001 = false;
     }
/*@egen*/{jjtn001.jjtSetVal(t.image);}/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
     }
/*@egen*/      
}

void MethodDeclaration() : {/*@bgen(jjtree) MethodDeclaration */
                            SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token p, i, lp, rp, lb, rb;}
{/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/
    p=<PUBLIC>/*@bgen(jjtree) Modifier */
              {
                SimpleNode jjtn001 = new SimpleNode(JJTMODIFIER);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
              }
/*@egen*/{jjtn001.jjtSetVal(p.image);}/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
              }
/*@egen*/          {}
    (
        Type() i=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                             {
                               SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFIER);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn002, true);
                               jjtc002 = false;
                             }
/*@egen*/{jjtn002.jjtSetVal(i.image);}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002, true);
                               }
                             }
/*@egen*/            
        lp=<LEFTPARENTHESES>/*@bgen(jjtree) LeftParentheses */
                            {
                              SimpleNode jjtn003 = new SimpleNode(JJTLEFTPARENTHESES);
                              boolean jjtc003 = true;
                              jjtree.openNodeScope(jjtn003);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn003, true);
                              jjtc003 = false;
                            }
/*@egen*/{jjtn003.jjtSetVal(lp.image);}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc003) {
                                jjtree.closeNodeScope(jjtn003, true);
                              }
                            }
/*@egen*/                 
            MethodArguments() 
        rp=<RIGHTPARENTHESES>/*@bgen(jjtree) RightParentheses */
                             {
                               SimpleNode jjtn004 = new SimpleNode(JJTRIGHTPARENTHESES);
                               boolean jjtc004 = true;
                               jjtree.openNodeScope(jjtn004);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn004, true);
                               jjtc004 = false;
                             }
/*@egen*/{jjtn004.jjtSetVal(rp.image);}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc004) {
                                 jjtree.closeNodeScope(jjtn004, true);
                               }
                             }
/*@egen*/                  
        lb=<LEFTBRACKET>/*@bgen(jjtree) LeftBracket */
                        {
                          SimpleNode jjtn005 = new SimpleNode(JJTLEFTBRACKET);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn005, true);
                          jjtc005 = false;
                        }
/*@egen*/{jjtn005.jjtSetVal(lb.image);}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005, true);
                          }
                        }
/*@egen*/             
            MethodBody()
        rb=<RIGHTBRACKET>/*@bgen(jjtree) RightBracket */
                         {
                           SimpleNode jjtn006 = new SimpleNode(JJTRIGHTBRACKET);
                           boolean jjtc006 = true;
                           jjtree.openNodeScope(jjtn006);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn006, true);
                           jjtc006 = false;
                         }
/*@egen*/{jjtn006.jjtSetVal(rb.image);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc006) {
                             jjtree.closeNodeScope(jjtn006, true);
                           }
                         }
/*@egen*/              
        | MainDeclaration()   
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MainDeclaration() : {/*@bgen(jjtree) MainDeclaration */
                          SimpleNode jjtn000 = new SimpleNode(JJTMAINDECLARATION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token st, v, m, lp, rp, s, slb, srb, i, lb, rb;}
{/*@bgen(jjtree) MainDeclaration */
    try {
/*@egen*/
    st=<STATIC>/*@bgen(jjtree) Static */
               {
                 SimpleNode jjtn001 = new SimpleNode(JJTSTATIC);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*//*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtc001 = false;
               }
/*@egen*/{jjtn001.jjtSetVal(st.image);}/*@bgen(jjtree)*/
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/        
    v=<VOID>/*@bgen(jjtree) Void */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTVOID);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn002, true);
              jjtc002 = false;
            }
/*@egen*/{jjtn002.jjtSetVal(v.image);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
              }
            }
/*@egen*/      
    m=<MAIN>/*@bgen(jjtree) Main */
            {
              SimpleNode jjtn003 = new SimpleNode(JJTMAIN);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn003, true);
              jjtc003 = false;
            }
/*@egen*/{jjtn003.jjtSetVal(m.image);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003, true);
              }
            }
/*@egen*/       
    lp=<LEFTPARENTHESES>/*@bgen(jjtree) LeftParentheses */
                        {
                          SimpleNode jjtn004 = new SimpleNode(JJTLEFTPARENTHESES);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn004, true);
                          jjtc004 = false;
                        }
/*@egen*/{jjtn004.jjtSetVal(lp.image);}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004, true);
                          }
                        }
/*@egen*/                 
    s=<STRING>/*@bgen(jjtree) Type */
              {
                SimpleNode jjtn005 = new SimpleNode(JJTTYPE);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn005, true);
                jjtc005 = false;
              }
/*@egen*/{jjtn005.jjtSetVal(s.image);}/*@bgen(jjtree)*/
              } finally {
                if (jjtc005) {
                  jjtree.closeNodeScope(jjtn005, true);
                }
              }
/*@egen*/       
    slb=<SQUARELEFTBRACKET>/*@bgen(jjtree) SquareLeftBracket */
                           {
                             SimpleNode jjtn006 = new SimpleNode(JJTSQUARELEFTBRACKET);
                             boolean jjtc006 = true;
                             jjtree.openNodeScope(jjtn006);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn006, true);
                             jjtc006 = false;
                           }
/*@egen*/{jjtn006.jjtSetVal(slb.image);}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc006) {
                               jjtree.closeNodeScope(jjtn006, true);
                             }
                           }
/*@egen*/                    
    srb=<SQUARERIGHTBRACKET>/*@bgen(jjtree) SquareRightBracket */
                            {
                              SimpleNode jjtn007 = new SimpleNode(JJTSQUARERIGHTBRACKET);
                              boolean jjtc007 = true;
                              jjtree.openNodeScope(jjtn007);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn007, true);
                              jjtc007 = false;
                            }
/*@egen*/{jjtn007.jjtSetVal(st.image);}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc007) {
                                jjtree.closeNodeScope(jjtn007, true);
                              }
                            }
/*@egen*/                     
    i=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                  {
                    SimpleNode jjtn008 = new SimpleNode(JJTIDENTIFIER);
                    boolean jjtc008 = true;
                    jjtree.openNodeScope(jjtn008);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn008, true);
                    jjtc008 = false;
                  }
/*@egen*/{jjtn008.jjtSetVal(i.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc008) {
                      jjtree.closeNodeScope(jjtn008, true);
                    }
                  }
/*@egen*/             
    rp=<RIGHTPARENTHESES>/*@bgen(jjtree) RightParentheses */
                         {
                           SimpleNode jjtn009 = new SimpleNode(JJTRIGHTPARENTHESES);
                           boolean jjtc009 = true;
                           jjtree.openNodeScope(jjtn009);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn009, true);
                           jjtc009 = false;
                         }
/*@egen*/{jjtn009.jjtSetVal(rp.image);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc009) {
                             jjtree.closeNodeScope(jjtn009, true);
                           }
                         }
/*@egen*/                  
        lb=<LEFTBRACKET>/*@bgen(jjtree) LeftBracket */
                        {
                          SimpleNode jjtn010 = new SimpleNode(JJTLEFTBRACKET);
                          boolean jjtc010 = true;
                          jjtree.openNodeScope(jjtn010);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn010, true);
                          jjtc010 = false;
                        }
/*@egen*/{jjtn010.jjtSetVal(lb.image);}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc010) {
                            jjtree.closeNodeScope(jjtn010, true);
                          }
                        }
/*@egen*/             
        VariableAndStatement()
        rb=<RIGHTBRACKET>/*@bgen(jjtree) RightBracket */
                         {
                           SimpleNode jjtn011 = new SimpleNode(JJTRIGHTBRACKET);
                           boolean jjtc011 = true;
                           jjtree.openNodeScope(jjtn011);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn011, true);
                           jjtc011 = false;
                         }
/*@egen*/{jjtn011.jjtSetVal(rb.image);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc011) {
                             jjtree.closeNodeScope(jjtn011, true);
                           }
                         }
/*@egen*/              /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void MethodArguments() : {/*@bgen(jjtree) MethodArguments */
                          SimpleNode jjtn000 = new SimpleNode(JJTMETHODARGUMENTS);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token i1, c, i2;}
{/*@bgen(jjtree) MethodArguments */
    try {
/*@egen*/
    [Type()
    i1=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                   {
                     SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIER);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                   }
/*@egen*/{jjtn001.jjtSetVal(i1.image);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
                   }
/*@egen*/            {} 
    ( 
        c=<COMMA>/*@bgen(jjtree) Comma */
                 {
                   SimpleNode jjtn002 = new SimpleNode(JJTCOMMA);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn002, true);
                   jjtc002 = false;
                 }
/*@egen*/{jjtn002.jjtSetVal(c.image);}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
                 }
/*@egen*/       
        Type()
        i2=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                       {
                         SimpleNode jjtn003 = new SimpleNode(JJTIDENTIFIER);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn003, true);
                         jjtc003 = false;
                       }
/*@egen*/{jjtn003.jjtSetVal(i2.image);}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003, true);
                         }
                       }
/*@egen*/            
    )*]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration()                      : {/*@bgen(jjtree) VariableDeclaration */
                                              SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATION);
                                              boolean jjtc000 = true;
                                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, s;}
{/*@bgen(jjtree) VariableDeclaration */
    try {
/*@egen*/
    Type()
    t=<IDENTIFIER>/*@bgen(jjtree) VariableName */
                  {
                    SimpleNode jjtn001 = new SimpleNode(JJTVARIABLENAME);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                  }
/*@egen*/{jjtn001.jjtSetVal(t.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/              
    s=<SEMICOLON>/*@bgen(jjtree) Semicolon */
                 {
                   SimpleNode jjtn002 = new SimpleNode(JJTSEMICOLON);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn002, true);
                   jjtc002 = false;
                 }
/*@egen*/{jjtn002.jjtSetVal(s.image);}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
                 }
/*@egen*/           /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VariableAndStatement()       : {Token i1, i2, s1, s2, e;}
{
    Type() 
    i1=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                   {
                     SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIER);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                   }
/*@egen*/{jjtn001.jjtSetVal(i1.image);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
                   }
/*@egen*/             
    s1=<SEMICOLON>/*@bgen(jjtree) Semicolon */
                  {
                    SimpleNode jjtn002 = new SimpleNode(JJTSEMICOLON);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                  }
/*@egen*/{jjtn002.jjtSetVal(s1.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
                  }
/*@egen*/            
    VariableAndStatement()
    |
    i1=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                   {
                     SimpleNode jjtn003 = new SimpleNode(JJTIDENTIFIER);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtc003 = false;
                   }
/*@egen*/{jjtn003.jjtSetVal(i1.image);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003, true);
                     }
                   }
/*@egen*/            {} 
    (
        i2=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                       {
                         SimpleNode jjtn004 = new SimpleNode(JJTIDENTIFIER);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn004, true);
                         jjtc004 = false;
                       }
/*@egen*/{jjtn004.jjtSetVal(i2.image);}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004, true);
                         }
                       }
/*@egen*/             
        s2=<SEMICOLON>/*@bgen(jjtree) Semicolon */
                      {
                        SimpleNode jjtn005 = new SimpleNode(JJTSEMICOLON);
                        boolean jjtc005 = true;
                        jjtree.openNodeScope(jjtn005);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn005, true);
                        jjtc005 = false;
                      }
/*@egen*/{jjtn005.jjtSetVal(s2.image);}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc005) {
                          jjtree.closeNodeScope(jjtn005, true);
                        }
                      }
/*@egen*/            
        VariableAndStatement()
        |
        (
            (
                (
                    e=<EQUAL>/*@bgen(jjtree) Equal */
                             {
                               SimpleNode jjtn006 = new SimpleNode(JJTEQUAL);
                               boolean jjtc006 = true;
                               jjtree.openNodeScope(jjtn006);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn006, true);
                               jjtc006 = false;
                             }
/*@egen*/{jjtn006.jjtSetVal(e.image);}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc006) {
                                 jjtree.closeNodeScope(jjtn006, true);
                               }
                             }
/*@egen*/        
                    Expression()
                )
                |
                (ArrAcc() [
                    e=<EQUAL>/*@bgen(jjtree) Equal */
                             {
                               SimpleNode jjtn007 = new SimpleNode(JJTEQUAL);
                               boolean jjtc007 = true;
                               jjtree.openNodeScope(jjtn007);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn007, true);
                               jjtc007 = false;
                             }
/*@egen*/{jjtn007.jjtSetVal(e.image);}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc007) {
                                 jjtree.closeNodeScope(jjtn007, true);
                               }
                             }
/*@egen*/        
                    Expression()
                    ])
                |
                (ObjAcc() ExpressionTail())
                |
                (ExpressionTail())
            ) 
            s2=<SEMICOLON>/*@bgen(jjtree) Semicolon */
                          {
                            SimpleNode jjtn008 = new SimpleNode(JJTSEMICOLON);
                            boolean jjtc008 = true;
                            jjtree.openNodeScope(jjtn008);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn008, true);
                            jjtc008 = false;
                          }
/*@egen*/{jjtn008.jjtSetVal(s2.image);}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc008) {
                              jjtree.closeNodeScope(jjtn008, true);
                            }
                          }
/*@egen*/           
        ) (Statement())*
    )
    |
    [LiteralStatement() (Statement())*]
}

void MethodBody()       : {Token r, s;}
{
    VariableAndStatement() 
    r=<RETURN>/*@bgen(jjtree) Return */
              {
                SimpleNode jjtn001 = new SimpleNode(JJTRETURN);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
              }
/*@egen*/{jjtn001.jjtSetVal(r.image);}/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
              }
/*@egen*/         
    Expression() 
    s=<SEMICOLON>/*@bgen(jjtree) Semicolon */
                 {
                   SimpleNode jjtn002 = new SimpleNode(JJTSEMICOLON);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn002, true);
                   jjtc002 = false;
                 }
/*@egen*/{jjtn002.jjtSetVal(s.image);}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
                 }
/*@egen*/           
}

void ClassDeclaration()                   : {/*@bgen(jjtree) ClassDeclaration */
                                             SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATION);
                                             boolean jjtc000 = true;
                                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token i1, e, i2, l, r;}
{/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    <CLASS> 
    i1=<IDENTIFIER>/*@bgen(jjtree) ClassName */
                   {
                     SimpleNode jjtn001 = new SimpleNode(JJTCLASSNAME);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                   }
/*@egen*/{jjtn001.jjtSetVal(i1.image);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
                   }
/*@egen*/           {}
    (
        e=<EXTENDS>/*@bgen(jjtree) Extends */
                   {
                     SimpleNode jjtn002 = new SimpleNode(JJTEXTENDS);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
                   }
/*@egen*/{jjtn002.jjtSetVal(e.image);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                     }
                   }
/*@egen*/         
        i2=<IDENTIFIER>/*@bgen(jjtree) ClassName */
                       {
                         SimpleNode jjtn003 = new SimpleNode(JJTCLASSNAME);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn003, true);
                         jjtc003 = false;
                       }
/*@egen*/{jjtn003.jjtSetVal(i2.image);}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003, true);
                         }
                       }
/*@egen*/           
    )* 

    l=<LEFTBRACKET>/*@bgen(jjtree) LeftBracket */
                   {
                     SimpleNode jjtn004 = new SimpleNode(JJTLEFTBRACKET);
                     boolean jjtc004 = true;
                     jjtree.openNodeScope(jjtn004);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn004, true);
                     jjtc004 = false;
                   }
/*@egen*/{jjtn004.jjtSetVal(l.image);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc004) {
                       jjtree.closeNodeScope(jjtn004, true);
                     }
                   }
/*@egen*/             {}
        (VarDeclaration())* 
        (MethodDeclaration())* 
    r=<RIGHTBRACKET>/*@bgen(jjtree) RightBracket */
                    {
                      SimpleNode jjtn005 = new SimpleNode(JJTRIGHTBRACKET);
                      boolean jjtc005 = true;
                      jjtree.openNodeScope(jjtn005);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn005, true);
                      jjtc005 = false;
                    }
/*@egen*/{jjtn005.jjtSetVal(r.image);}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005, true);
                      }
                    }
/*@egen*/              /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CommonStatement()      : {Token lb, rb;}
{
    lb=<LEFTBRACKET>/*@bgen(jjtree) LeftBracket */
                    {
                      SimpleNode jjtn001 = new SimpleNode(JJTLEFTBRACKET);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                    }
/*@egen*/{jjtn001.jjtSetVal(lb.image);}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
                    }
/*@egen*/             {}
    (Statement())* 
    rb=<RIGHTBRACKET>/*@bgen(jjtree) RightBracket */
                     {
                       SimpleNode jjtn002 = new SimpleNode(JJTRIGHTBRACKET);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn002, true);
                       jjtc002 = false;
                     }
/*@egen*/{jjtn002.jjtSetVal(rb.image);}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002, true);
                       }
                     }
/*@egen*/              
    | IfStatement() 
    | WhileStatement() 
}

void Statement()      : {}
{
    CommonStatement()
    | LineStatement()
}

void LiteralStatement()       : {}
{
    CommonStatement()
    | LiteralLineStatement()
}

void LineStatement() : {/*@bgen(jjtree) LineStatement */
                        SimpleNode jjtn000 = new SimpleNode(JJTLINESTATEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token i, e, s;}
{/*@bgen(jjtree) LineStatement */
    try {
/*@egen*/
    (
        LiteralExpr4() ExpressionTail()
        |
        (
            i=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                          {
                            SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIER);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                          }
/*@egen*/{jjtn001.jjtSetVal(i.image);}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
                          }
/*@egen*/            {} 
            (
                e=<EQUAL>/*@bgen(jjtree) Equal */
                         {
                           SimpleNode jjtn002 = new SimpleNode(JJTEQUAL);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtc002 = false;
                         }
/*@egen*/{jjtn002.jjtSetVal(e.image);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
                         }
/*@egen*/        
                Expression()
                |
                (ArrAcc() [e=<EQUAL>/*@bgen(jjtree) Equal */
                                    {
                                      SimpleNode jjtn003 = new SimpleNode(JJTEQUAL);
                                      boolean jjtc003 = true;
                                      jjtree.openNodeScope(jjtn003);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn003, true);
                                      jjtc003 = false;
                                    }
/*@egen*/{jjtn003.jjtSetVal(e.image);}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc003) {
                                        jjtree.closeNodeScope(jjtn003, true);
                                      }
                                    }
/*@egen*/        Expression()])
                |
                (ObjAcc() ExpressionTail())
                |
                ExpressionTail()
            )
        )
    )
    s=<SEMICOLON>/*@bgen(jjtree) Semicolon */
                 {
                   SimpleNode jjtn004 = new SimpleNode(JJTSEMICOLON);
                   boolean jjtc004 = true;
                   jjtree.openNodeScope(jjtn004);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn004, true);
                   jjtc004 = false;
                 }
/*@egen*/{jjtn004.jjtSetVal(s.image);}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc004) {
                     jjtree.closeNodeScope(jjtn004, true);
                   }
                 }
/*@egen*/           /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LiteralLineStatement() : {/*@bgen(jjtree) LiteralLineStatement */
                               SimpleNode jjtn000 = new SimpleNode(JJTLITERALLINESTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token i, e, s;}
{/*@bgen(jjtree) LiteralLineStatement */
    try {
/*@egen*/
    LiteralExpr4() ExpressionTail()
    s=<SEMICOLON>/*@bgen(jjtree) Semicolon */
                 {
                   SimpleNode jjtn001 = new SimpleNode(JJTSEMICOLON);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
                 }
/*@egen*/{jjtn001.jjtSetVal(s.image);}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
                 }
/*@egen*/           /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void ExpressionTail()       : {}
{
    (Oper4())* (Oper3())* (Oper2())* (Oper1())*
}

void Statement1()       : {Token e, s, slb, srb;}
{
    (
        e=<EQUAL>/*@bgen(jjtree) Equal */
                 {
                   SimpleNode jjtn001 = new SimpleNode(JJTEQUAL);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
                 }
/*@egen*/{jjtn001.jjtSetVal(e.image);}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
                 }
/*@egen*/       
        Expression() 
        e=<SEMICOLON>/*@bgen(jjtree) Semicolon */
                     {
                       SimpleNode jjtn002 = new SimpleNode(JJTSEMICOLON);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn002, true);
                       jjtc002 = false;
                     }
/*@egen*/{jjtn002.jjtSetVal(e.image);}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002, true);
                       }
                     }
/*@egen*/           
    ) 
    | ( 
        slb=<SQUARELEFTBRACKET>/*@bgen(jjtree) SquareLeftBracket */
                               {
                                 SimpleNode jjtn003 = new SimpleNode(JJTSQUARELEFTBRACKET);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
                               }
                               try {
/*@egen*//*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn003, true);
                                 jjtc003 = false;
                               }
/*@egen*/{jjtn003.jjtSetVal(slb.image);}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003, true);
                                 }
                               }
/*@egen*/                   
        Expression() 
        srb=<SQUARERIGHTBRACKET>/*@bgen(jjtree) SquareRightBracket */
                                {
                                  SimpleNode jjtn004 = new SimpleNode(JJTSQUARERIGHTBRACKET);
                                  boolean jjtc004 = true;
                                  jjtree.openNodeScope(jjtn004);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn004, true);
                                  jjtc004 = false;
                                }
/*@egen*/{jjtn004.jjtSetVal(srb.image);}/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc004) {
                                    jjtree.closeNodeScope(jjtn004, true);
                                  }
                                }
/*@egen*/                    
        [
            e=<EQUAL>/*@bgen(jjtree) Equal */
                     {
                       SimpleNode jjtn005 = new SimpleNode(JJTEQUAL);
                       boolean jjtc005 = true;
                       jjtree.openNodeScope(jjtn005);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn005, true);
                       jjtc005 = false;
                     }
/*@egen*/{jjtn005.jjtSetVal(e.image);}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc005) {
                         jjtree.closeNodeScope(jjtn005, true);
                       }
                     }
/*@egen*/       
            Expression() 
            s=<SEMICOLON>/*@bgen(jjtree) Semicolon */
                         {
                           SimpleNode jjtn006 = new SimpleNode(JJTSEMICOLON);
                           boolean jjtc006 = true;
                           jjtree.openNodeScope(jjtn006);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn006, true);
                           jjtc006 = false;
                         }
/*@egen*/{jjtn006.jjtSetVal(s.image);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc006) {
                             jjtree.closeNodeScope(jjtn006, true);
                           }
                         }
/*@egen*/           
        ])
    | ObjAcc()
}

void IfStatement() : {/*@bgen(jjtree) IfStatement */
                      SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token i, lp, rp, e;}
{/*@bgen(jjtree) IfStatement */
    try {
/*@egen*/
    i=<IF>/*@bgen(jjtree) If */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTIF);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
          }
/*@egen*/{jjtn001.jjtSetVal(i.image);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/    
    lp=<LEFTPARENTHESES>/*@bgen(jjtree) LeftParentheses */
                        {
                          SimpleNode jjtn002 = new SimpleNode(JJTLEFTPARENTHESES);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                        }
/*@egen*/{jjtn002.jjtSetVal(lp.image);}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
                        }
/*@egen*/                 
    Expression() 
    rp=<RIGHTPARENTHESES>/*@bgen(jjtree) RightParentheses */
                         {
                           SimpleNode jjtn003 = new SimpleNode(JJTRIGHTPARENTHESES);
                           boolean jjtc003 = true;
                           jjtree.openNodeScope(jjtn003);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn003, true);
                           jjtc003 = false;
                         }
/*@egen*/{jjtn003.jjtSetVal(rp.image);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc003) {
                             jjtree.closeNodeScope(jjtn003, true);
                           }
                         }
/*@egen*/                  
    Statement()
    e=<ELSE>/*@bgen(jjtree) Else */
            {
              SimpleNode jjtn004 = new SimpleNode(JJTELSE);
              boolean jjtc004 = true;
              jjtree.openNodeScope(jjtn004);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn004, true);
              jjtc004 = false;
            }
/*@egen*/{jjtn004.jjtSetVal(e.image);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc004) {
                jjtree.closeNodeScope(jjtn004, true);
              }
            }
/*@egen*/      
    Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void WhileStatement() : {/*@bgen(jjtree) WhileStatement */
                         SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token w, lp, rp;}
{/*@bgen(jjtree) WhileStatement */
    try {
/*@egen*/
    try{
        w=<WHILE>/*@bgen(jjtree) While */
                 {
                   SimpleNode jjtn001 = new SimpleNode(JJTWHILE);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
                 }
/*@egen*/{jjtn001.jjtSetVal(w.image);}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
                 }
/*@egen*/       
        lp=<LEFTPARENTHESES>/*@bgen(jjtree) LeftParentheses */
                            {
                              SimpleNode jjtn002 = new SimpleNode(JJTLEFTPARENTHESES);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn002, true);
                              jjtc002 = false;
                            }
/*@egen*/{jjtn002.jjtSetVal(lp.image);}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                              }
                            }
/*@egen*/                 
    }catch(ParseException e){
        //t = getNextToken();       
    }

    try {
        Expression() 
        try{
            rp=<RIGHTPARENTHESES>/*@bgen(jjtree) RightParentheses */
                                 {
                                   SimpleNode jjtn003 = new SimpleNode(JJTRIGHTPARENTHESES);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn003, true);
                                   jjtc003 = false;
                                 }
/*@egen*/{jjtn003.jjtSetVal(rp.image);}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003, true);
                                   }
                                 }
/*@egen*/                  
        }catch(ParseException e) {
            //t = getNextToken();
        }
    }
    catch (ParseException e) {
        System.out.println(e.toString());
        Token t;
        do {
            t = getToken(1);
            if(t.kind == LEFTBRACKET)
                break;
            getNextToken();
        } while (true);        
    }

    Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression() : {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    Expr1() (Oper1())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Oper1()       : {Token a;} 
{
    a=<AND>/*@bgen(jjtree) And */
           {
             SimpleNode jjtn001 = new SimpleNode(JJTAND);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
           }
/*@egen*/{jjtn001.jjtSetVal(a.image);}/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/     
    Expr1() 
}

void Expr1()       : {}
{
    Expr2() (Oper2())*
}

void Oper2()       : {Token l;}
{
    l=<LESS>/*@bgen(jjtree) Less */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTLESS);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
            }
/*@egen*/{jjtn001.jjtSetVal(l.image);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/      
    Expr2() 
}

void Expr2()       : {}
{
    Expr3() (Oper3())*
}

void Oper3()       : {Token t;}
{
    t=<PLUS>/*@bgen(jjtree) Plus */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTPLUS);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
            }
/*@egen*/{jjtn001.jjtSetVal(t.image);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/      
    Expr3() |
    t=<MINUS>/*@bgen(jjtree) Minus */
             {
               SimpleNode jjtn002 = new SimpleNode(JJTMINUS);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn002, true);
               jjtc002 = false;
             }
/*@egen*/{jjtn002.jjtSetVal(t.image);}/*@bgen(jjtree)*/
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
               }
             }
/*@egen*/       
    Expr3() 
}

void Expr3()       : {}
{
    Expr4() (Oper4())*
}

void Oper4()       : {Token t;}
{
    t=<MULT>/*@bgen(jjtree) Mult */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTMULT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
            }
/*@egen*/{jjtn001.jjtSetVal(t.image);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/      
    Expr4() |
    t=<DIV>/*@bgen(jjtree) Div */
           {
             SimpleNode jjtn002 = new SimpleNode(JJTDIV);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn002, true);
             jjtc002 = false;
           }
/*@egen*/{jjtn002.jjtSetVal(t.image);}/*@bgen(jjtree)*/
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
             }
           }
/*@egen*/     
    Expr4() 
}

void Expr4()       : {}
{
    LiteralExpr4() |
    IdentifierExpr4()
}

void LiteralExpr4()       : {Token t, t2;}
{
    (t=<INTEGERLITERAL>/*@bgen(jjtree) Integer */
                       {
                         SimpleNode jjtn001 = new SimpleNode(JJTINTEGER);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                       }
/*@egen*/{jjtn001.jjtSetVal(t.image);}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
                       }
/*@egen*/         {} 
        (ExprTail())*) |
    (t=<TRUE>/*@bgen(jjtree) Boolean */
             {
               SimpleNode jjtn002 = new SimpleNode(JJTBOOLEAN);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn002, true);
               jjtc002 = false;
             }
/*@egen*/{jjtn002.jjtSetVal(t.image);}/*@bgen(jjtree)*/
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
               }
             }
/*@egen*/         {}
        (ExprTail())*) |
    (t=<FALSE>/*@bgen(jjtree) Boolean */
              {
                SimpleNode jjtn003 = new SimpleNode(JJTBOOLEAN);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn003, true);
                jjtc003 = false;
              }
/*@egen*/{jjtn003.jjtSetVal(t.image);}/*@bgen(jjtree)*/
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003, true);
                }
              }
/*@egen*/         {} 
        (ExprTail())*) |
    (t=<THIS>/*@bgen(jjtree) This */
             {
               SimpleNode jjtn004 = new SimpleNode(JJTTHIS);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn004, true);
               jjtc004 = false;
             }
/*@egen*/{jjtn004.jjtSetVal(t.image);}/*@bgen(jjtree)*/
             } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004, true);
               }
             }
/*@egen*/      {}
        (ExprTail())*) |
    (t=<NEW>/*@bgen(jjtree) New */
            {
              SimpleNode jjtn005 = new SimpleNode(JJTNEW);
              boolean jjtc005 = true;
              jjtree.openNodeScope(jjtn005);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn005, true);
              jjtc005 = false;
            }
/*@egen*/{jjtn005.jjtSetVal(t.image);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc005) {
                jjtree.closeNodeScope(jjtn005, true);
              }
            }
/*@egen*/     
        NewExpr()) |
    (t=<LEFTPARENTHESES>/*@bgen(jjtree) LeftParentheses */
                        {
                          SimpleNode jjtn006 = new SimpleNode(JJTLEFTPARENTHESES);
                          boolean jjtc006 = true;
                          jjtree.openNodeScope(jjtn006);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn006, true);
                          jjtc006 = false;
                        }
/*@egen*/{jjtn006.jjtSetVal(t.image);}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc006) {
                            jjtree.closeNodeScope(jjtn006, true);
                          }
                        }
/*@egen*/                 
        Expression() 
        t2=<RIGHTPARENTHESES>/*@bgen(jjtree) RightParentheses */
                             {
                               SimpleNode jjtn007 = new SimpleNode(JJTRIGHTPARENTHESES);
                               boolean jjtc007 = true;
                               jjtree.openNodeScope(jjtn007);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn007, true);
                               jjtc007 = false;
                             }
/*@egen*/{jjtn007.jjtSetVal(t2.image);}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc007) {
                                 jjtree.closeNodeScope(jjtn007, true);
                               }
                             }
/*@egen*/                  {}
        (ExprTail())*) |
    (t=<NEG>/*@bgen(jjtree) Negation */
            {
              SimpleNode jjtn008 = new SimpleNode(JJTNEGATION);
              boolean jjtc008 = true;
              jjtree.openNodeScope(jjtn008);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn008, true);
              jjtc008 = false;
            }
/*@egen*/{jjtn008.jjtSetVal(t.image);}/*@bgen(jjtree)*/
            } finally {
              if (jjtc008) {
                jjtree.closeNodeScope(jjtn008, true);
              }
            }
/*@egen*/           
        Expr4()) 
}

void IdentifierExpr4()       : {Token t;}
{
    t=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                  {
                    SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIER);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                  }
/*@egen*/{jjtn001.jjtSetVal(t.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/            {}
    (ExprTail())*
}

void ExprTail()       : {}
{
    ArrAcc() | ObjAcc()
}

    
void ArrAcc()       : {Token t1, t2;}
{
    t1=<SQUARELEFTBRACKET>/*@bgen(jjtree) SquareLeftBracket */
                          {
                            SimpleNode jjtn001 = new SimpleNode(JJTSQUARELEFTBRACKET);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                          }
/*@egen*/{jjtn001.jjtSetVal(t1.image);}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
                          }
/*@egen*/                   
    Expression() 
    t2=<SQUARERIGHTBRACKET>/*@bgen(jjtree) SquareRightBracket */
                           {
                             SimpleNode jjtn002 = new SimpleNode(JJTSQUARERIGHTBRACKET);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn002, true);
                             jjtc002 = false;
                           }
/*@egen*/{jjtn002.jjtSetVal(t2.image);}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                             }
                           }
/*@egen*/                    
}

void ObjAcc()       : {Token t, l, r;}
{
    [l=<LEFTPARENTHESES>/*@bgen(jjtree) LeftParentheses */
                        {
                          SimpleNode jjtn001 = new SimpleNode(JJTLEFTPARENTHESES);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                        }
/*@egen*/{jjtn001.jjtSetVal(l.image);}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
                        }
/*@egen*/                 
    [
        Expression()]
        r=<RIGHTPARENTHESES>/*@bgen(jjtree) RightParentheses */
                            {
                              SimpleNode jjtn002 = new SimpleNode(JJTRIGHTPARENTHESES);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn002, true);
                              jjtc002 = false;
                            }
/*@egen*/{jjtn002.jjtSetVal(r.image);}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                              }
                            }
/*@egen*/                  
    ]
    t=<DOT>/*@bgen(jjtree) Dot */
           {
             SimpleNode jjtn003 = new SimpleNode(JJTDOT);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn003, true);
             jjtc003 = false;
           }
/*@egen*/{jjtn003.jjtSetVal(t.image);}/*@bgen(jjtree)*/
           } finally {
             if (jjtc003) {
               jjtree.closeNodeScope(jjtn003, true);
             }
           }
/*@egen*/     
    ObjAccTail()
}

void ObjAccTail()       : {Token t;}
{
    t=<LENGTH>/*@bgen(jjtree) Length */
              {
                SimpleNode jjtn001 = new SimpleNode(JJTLENGTH);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
              }
/*@egen*/{jjtn001.jjtSetVal(t.image);}/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
              }
/*@egen*/        
    | 
    t=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                  {
                    SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFIER);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                  }
/*@egen*/{jjtn002.jjtSetVal(t.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
                  }
/*@egen*/             
    Args()
}

void Args()       : {Token t1, t2;} 
{
    t1=<LEFTPARENTHESES>/*@bgen(jjtree) LeftParentheses */
                        {
                          SimpleNode jjtn001 = new SimpleNode(JJTLEFTPARENTHESES);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                        }
/*@egen*/{jjtn001.jjtSetVal(t1.image);}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
                        }
/*@egen*/                 
    [Expression() [OptArgs()]]
    t2=<RIGHTPARENTHESES>/*@bgen(jjtree) RightParentheses */
                         {
                           SimpleNode jjtn002 = new SimpleNode(JJTRIGHTPARENTHESES);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtc002 = false;
                         }
/*@egen*/{jjtn002.jjtSetVal(t2.image);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
                         }
/*@egen*/                  
}

void OptArgs()       : {Token t;}
{
    t=<COMMA>/*@bgen(jjtree) Comma */
             {
               SimpleNode jjtn001 = new SimpleNode(JJTCOMMA);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn001, true);
               jjtc001 = false;
             }
/*@egen*/{jjtn001.jjtSetVal(t.image);}/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/       
    Expression() [OptArgs()]

}

void NewExpr() : {/*@bgen(jjtree) NewExpr */
                  SimpleNode jjtn000 = new SimpleNode(JJTNEWEXPR);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token i, l, r;}
{/*@bgen(jjtree) NewExpr */
    try {
/*@egen*/
    i=<INT>/*@bgen(jjtree) Integer */
           {
             SimpleNode jjtn001 = new SimpleNode(JJTINTEGER);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
           }
/*@egen*/{jjtn001.jjtSetVal(i.image);}/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/         
    l=<SQUARELEFTBRACKET>/*@bgen(jjtree) SquareLeftBracket */
                         {
                           SimpleNode jjtn002 = new SimpleNode(JJTSQUARELEFTBRACKET);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtc002 = false;
                         }
/*@egen*/{jjtn002.jjtSetVal(l.image);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
                         }
/*@egen*/                   
    Expression() 
    r=<SQUARERIGHTBRACKET>/*@bgen(jjtree) SquareRightBracket */
                          {
                            SimpleNode jjtn003 = new SimpleNode(JJTSQUARERIGHTBRACKET);
                            boolean jjtc003 = true;
                            jjtree.openNodeScope(jjtn003);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn003, true);
                            jjtc003 = false;
                          }
/*@egen*/{jjtn003.jjtSetVal(r.image);}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc003) {
                              jjtree.closeNodeScope(jjtn003, true);
                            }
                          }
/*@egen*/                    
    |
    i=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                  {
                    SimpleNode jjtn004 = new SimpleNode(JJTIDENTIFIER);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn004, true);
                    jjtc004 = false;
                  }
/*@egen*/{jjtn004.jjtSetVal(i.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc004) {
                      jjtree.closeNodeScope(jjtn004, true);
                    }
                  }
/*@egen*/            
    l=<LEFTPARENTHESES>/*@bgen(jjtree) LeftParentheses */
                       {
                         SimpleNode jjtn005 = new SimpleNode(JJTLEFTPARENTHESES);
                         boolean jjtc005 = true;
                         jjtree.openNodeScope(jjtn005);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn005, true);
                         jjtc005 = false;
                       }
/*@egen*/{jjtn005.jjtSetVal(l.image);}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc005) {
                           jjtree.closeNodeScope(jjtn005, true);
                         }
                       }
/*@egen*/                 
    r=<RIGHTPARENTHESES>/*@bgen(jjtree) RightParentheses */
                        {
                          SimpleNode jjtn006 = new SimpleNode(JJTRIGHTPARENTHESES);
                          boolean jjtc006 = true;
                          jjtree.openNodeScope(jjtn006);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn006, true);
                          jjtc006 = false;
                        }
/*@egen*/{jjtn006.jjtSetVal(r.image);}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc006) {
                            jjtree.closeNodeScope(jjtn006, true);
                          }
                        }
/*@egen*/                  
    [ObjAcc()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}