/* Javamm.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Javamm.java */
public class Javamm/*@bgen(jjtree)*/implements JavammTreeConstants, JavammConstants {/*@bgen(jjtree)*/
  protected static JJTJavammState jjtree = new JJTJavammState();public static void main(String args[]) throws ParseException {

        Javamm myJavamm = new Javamm(System.in);
        SimpleNode root = myJavamm.JavaMM(); // returns reference to root node

        //System.out.println("Expression value: "+myJavamm.eval(root));

        root.dump(""); // prints the tree on the screen
    }

  static final public SimpleNode JavaMM() throws ParseException {/*@bgen(jjtree) JavaMM */
  SimpleNode jjtn000 = new SimpleNode(JJTJAVAMM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        ImportDeclaration();
      }
      label_2:
      while (true) {
        ClassDeclaration();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CLASS:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ImportDeclaration() throws ParseException {/*@bgen(jjtree) ImportDeclaration */
                            SimpleNode jjtn000 = new SimpleNode(JJTIMPORTDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:{
        jj_consume_token(STATIC);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIER);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                                        jjtc001 = false;
jjtn001.jjtSetVal(t.image);
      } finally {
if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001, true);
                                        }
      }
      ImportDeclaration1();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ImportDeclaration1() throws ParseException {Token d, i, l, r, s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      d = jj_consume_token(DOT);
SimpleNode jjtn001 = new SimpleNode(JJTDOT);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
jjtn001.jjtSetVal(d.image);
      } finally {
if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
      }
      i = jj_consume_token(IDENTIFIER);
SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFIER);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
jjtn002.jjtSetVal(i.image);
      } finally {
if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
      }
      ImportDeclaration1();
      break;
      }
    case LEFTPARENTHESES:
    case SEMICOLON:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTPARENTHESES:{
        l = jj_consume_token(LEFTPARENTHESES);
SimpleNode jjtn003 = new SimpleNode(JJTLEFTPARENTHESES);
                             boolean jjtc003 = true;
                             jjtree.openNodeScope(jjtn003);
        try {
jjtree.closeNodeScope(jjtn003, true);
                             jjtc003 = false;
jjtn003.jjtSetVal(l.image);
        } finally {
if (jjtc003) {
                               jjtree.closeNodeScope(jjtn003, true);
                             }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case INT:
        case STRING:
        case VOID:{
          TypeImport();
          ImportDeclaration2();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        r = jj_consume_token(RIGHTPARENTHESES);
SimpleNode jjtn004 = new SimpleNode(JJTRIGHTPARENTHESES);
                              boolean jjtc004 = true;
                              jjtree.openNodeScope(jjtn004);
        try {
jjtree.closeNodeScope(jjtn004, true);
                              jjtc004 = false;
jjtn004.jjtSetVal(r.image);
        } finally {
if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004, true);
                              }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case INT:
        case STRING:
        case VOID:{
          TypeImport();
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      s = jj_consume_token(SEMICOLON);
SimpleNode jjtn005 = new SimpleNode(JJTSEMICOLON);
                   boolean jjtc005 = true;
                   jjtree.openNodeScope(jjtn005);
      try {
jjtree.closeNodeScope(jjtn005, true);
                   jjtc005 = false;
jjtn005.jjtSetVal(s.image);
      } finally {
if (jjtc005) {
                     jjtree.closeNodeScope(jjtn005, true);
                   }
      }
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ImportDeclaration2() throws ParseException {Token s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      s = jj_consume_token(COMMA);
SimpleNode jjtn001 = new SimpleNode(JJTCOMMA);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
jjtn001.jjtSetVal(s.image);
      } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
      }
      TypeImport();
      ImportDeclaration2();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void TypeImport() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case INT:
    case STRING:{
      Type();
      break;
      }
    case VOID:{
      t = jj_consume_token(VOID);
SimpleNode jjtn001 = new SimpleNode(JJTTYPEIMPORT);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
jjtn001.jjtSetVal(t.image);
      } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                       }
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Type() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:{
      t = jj_consume_token(BOOLEAN);
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
      break;
      }
    case INT:{
      t = jj_consume_token(INT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SQUARELEFTBRACKET:{
        jj_consume_token(SQUARELEFTBRACKET);
        jj_consume_token(SQUARERIGHTBRACKET);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
SimpleNode jjtn001 = new SimpleNode(JJTTYPE);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
    try {
jjtree.closeNodeScope(jjtn001, true);
       jjtc001 = false;
jjtn001.jjtSetVal(t.image);
    } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
    }
  }

  static final public void MethodDeclaration() throws ParseException {/*@bgen(jjtree) MethodDeclaration */
                            SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token p, i, lp, rp, lb, rb;
    try {
      p = jj_consume_token(PUBLIC);
SimpleNode jjtn001 = new SimpleNode(JJTMODIFIER);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
jjtn001.jjtSetVal(p.image);
      } finally {
if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
      }

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case INT:
      case STRING:{
        Type();
        i = jj_consume_token(IDENTIFIER);
SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFIER);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002, true);
                               jjtc002 = false;
jjtn002.jjtSetVal(i.image);
        } finally {
if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002, true);
                               }
        }
        lp = jj_consume_token(LEFTPARENTHESES);
SimpleNode jjtn003 = new SimpleNode(JJTLEFTPARENTHESES);
                              boolean jjtc003 = true;
                              jjtree.openNodeScope(jjtn003);
        try {
jjtree.closeNodeScope(jjtn003, true);
                              jjtc003 = false;
jjtn003.jjtSetVal(lp.image);
        } finally {
if (jjtc003) {
                                jjtree.closeNodeScope(jjtn003, true);
                              }
        }
        MethodArguments();
        rp = jj_consume_token(RIGHTPARENTHESES);
SimpleNode jjtn004 = new SimpleNode(JJTRIGHTPARENTHESES);
                               boolean jjtc004 = true;
                               jjtree.openNodeScope(jjtn004);
        try {
jjtree.closeNodeScope(jjtn004, true);
                               jjtc004 = false;
jjtn004.jjtSetVal(rp.image);
        } finally {
if (jjtc004) {
                                 jjtree.closeNodeScope(jjtn004, true);
                               }
        }
        lb = jj_consume_token(LEFTBRACKET);
SimpleNode jjtn005 = new SimpleNode(JJTLEFTBRACKET);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
        try {
jjtree.closeNodeScope(jjtn005, true);
                          jjtc005 = false;
jjtn005.jjtSetVal(lb.image);
        } finally {
if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005, true);
                          }
        }
        MethodBody();
        rb = jj_consume_token(RIGHTBRACKET);
SimpleNode jjtn006 = new SimpleNode(JJTRIGHTBRACKET);
                           boolean jjtc006 = true;
                           jjtree.openNodeScope(jjtn006);
        try {
jjtree.closeNodeScope(jjtn006, true);
                           jjtc006 = false;
jjtn006.jjtSetVal(rb.image);
        } finally {
if (jjtc006) {
                             jjtree.closeNodeScope(jjtn006, true);
                           }
        }
        break;
        }
      case STATIC:{
        MainDeclaration();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MainDeclaration() throws ParseException {/*@bgen(jjtree) MainDeclaration */
                          SimpleNode jjtn000 = new SimpleNode(JJTMAINDECLARATION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token st, v, m, lp, rp, s, slb, srb, i, lb, rb;
    try {
      st = jj_consume_token(STATIC);
SimpleNode jjtn001 = new SimpleNode(JJTSTATIC);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                 jjtc001 = false;
jjtn001.jjtSetVal(st.image);
      } finally {
if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
      }
      v = jj_consume_token(VOID);
SimpleNode jjtn002 = new SimpleNode(JJTVOID);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
              jjtc002 = false;
jjtn002.jjtSetVal(v.image);
      } finally {
if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
              }
      }
      m = jj_consume_token(MAIN);
SimpleNode jjtn003 = new SimpleNode(JJTMAIN);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003, true);
              jjtc003 = false;
jjtn003.jjtSetVal(m.image);
      } finally {
if (jjtc003) {
                jjtree.closeNodeScope(jjtn003, true);
              }
      }
      lp = jj_consume_token(LEFTPARENTHESES);
SimpleNode jjtn004 = new SimpleNode(JJTLEFTPARENTHESES);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004, true);
                          jjtc004 = false;
jjtn004.jjtSetVal(lp.image);
      } finally {
if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004, true);
                          }
      }
      s = jj_consume_token(STRING);
SimpleNode jjtn005 = new SimpleNode(JJTTYPE);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
      try {
jjtree.closeNodeScope(jjtn005, true);
                jjtc005 = false;
jjtn005.jjtSetVal(s.image);
      } finally {
if (jjtc005) {
                  jjtree.closeNodeScope(jjtn005, true);
                }
      }
      slb = jj_consume_token(SQUARELEFTBRACKET);
SimpleNode jjtn006 = new SimpleNode(JJTSQUARELEFTBRACKET);
                             boolean jjtc006 = true;
                             jjtree.openNodeScope(jjtn006);
      try {
jjtree.closeNodeScope(jjtn006, true);
                             jjtc006 = false;
jjtn006.jjtSetVal(slb.image);
      } finally {
if (jjtc006) {
                               jjtree.closeNodeScope(jjtn006, true);
                             }
      }
      srb = jj_consume_token(SQUARERIGHTBRACKET);
SimpleNode jjtn007 = new SimpleNode(JJTSQUARERIGHTBRACKET);
                              boolean jjtc007 = true;
                              jjtree.openNodeScope(jjtn007);
      try {
jjtree.closeNodeScope(jjtn007, true);
                              jjtc007 = false;
jjtn007.jjtSetVal(st.image);
      } finally {
if (jjtc007) {
                                jjtree.closeNodeScope(jjtn007, true);
                              }
      }
      i = jj_consume_token(IDENTIFIER);
SimpleNode jjtn008 = new SimpleNode(JJTIDENTIFIER);
                    boolean jjtc008 = true;
                    jjtree.openNodeScope(jjtn008);
      try {
jjtree.closeNodeScope(jjtn008, true);
                    jjtc008 = false;
jjtn008.jjtSetVal(i.image);
      } finally {
if (jjtc008) {
                      jjtree.closeNodeScope(jjtn008, true);
                    }
      }
      rp = jj_consume_token(RIGHTPARENTHESES);
SimpleNode jjtn009 = new SimpleNode(JJTRIGHTPARENTHESES);
                           boolean jjtc009 = true;
                           jjtree.openNodeScope(jjtn009);
      try {
jjtree.closeNodeScope(jjtn009, true);
                           jjtc009 = false;
jjtn009.jjtSetVal(rp.image);
      } finally {
if (jjtc009) {
                             jjtree.closeNodeScope(jjtn009, true);
                           }
      }
      lb = jj_consume_token(LEFTBRACKET);
SimpleNode jjtn010 = new SimpleNode(JJTLEFTBRACKET);
                          boolean jjtc010 = true;
                          jjtree.openNodeScope(jjtn010);
      try {
jjtree.closeNodeScope(jjtn010, true);
                          jjtc010 = false;
jjtn010.jjtSetVal(lb.image);
      } finally {
if (jjtc010) {
                            jjtree.closeNodeScope(jjtn010, true);
                          }
      }
      VariableAndStatement();
      rb = jj_consume_token(RIGHTBRACKET);
SimpleNode jjtn011 = new SimpleNode(JJTRIGHTBRACKET);
                           boolean jjtc011 = true;
                           jjtree.openNodeScope(jjtn011);
      try {
jjtree.closeNodeScope(jjtn011, true);
                           jjtc011 = false;
jjtn011.jjtSetVal(rb.image);
      } finally {
if (jjtc011) {
                             jjtree.closeNodeScope(jjtn011, true);
                           }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MethodArguments() throws ParseException {/*@bgen(jjtree) MethodArguments */
                          SimpleNode jjtn000 = new SimpleNode(JJTMETHODARGUMENTS);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token i1, c, i2;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case INT:
      case STRING:{
        Type();
        i1 = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIER);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
jjtn001.jjtSetVal(i1.image);
        } finally {
if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
        }

        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            break label_3;
          }
          c = jj_consume_token(COMMA);
SimpleNode jjtn002 = new SimpleNode(JJTCOMMA);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
          try {
jjtree.closeNodeScope(jjtn002, true);
                   jjtc002 = false;
jjtn002.jjtSetVal(c.image);
          } finally {
if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
          }
          Type();
          i2 = jj_consume_token(IDENTIFIER);
SimpleNode jjtn003 = new SimpleNode(JJTIDENTIFIER);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
          try {
jjtree.closeNodeScope(jjtn003, true);
                         jjtc003 = false;
jjtn003.jjtSetVal(i2.image);
          } finally {
if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003, true);
                         }
          }
        }
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void VarDeclaration() throws ParseException {/*@bgen(jjtree) VariableDeclaration */
                                              SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATION);
                                              boolean jjtc000 = true;
                                              jjtree.openNodeScope(jjtn000);Token t, s;
    try {
      Type();
      t = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTVARIABLENAME);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
jjtn001.jjtSetVal(t.image);
      } finally {
if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
      }
      s = jj_consume_token(SEMICOLON);
SimpleNode jjtn002 = new SimpleNode(JJTSEMICOLON);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                   jjtc002 = false;
jjtn002.jjtSetVal(s.image);
      } finally {
if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void VariableAndStatement() throws ParseException {Token i1, i2, s1, s2, e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case INT:
    case STRING:{
      Type();
      i1 = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIER);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
jjtn001.jjtSetVal(i1.image);
      } finally {
if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
      }
      s1 = jj_consume_token(SEMICOLON);
SimpleNode jjtn002 = new SimpleNode(JJTSEMICOLON);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
jjtn002.jjtSetVal(s1.image);
      } finally {
if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
      }
      VariableAndStatement();
      break;
      }
    case IDENTIFIER:{
      i1 = jj_consume_token(IDENTIFIER);
SimpleNode jjtn003 = new SimpleNode(JJTIDENTIFIER);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003, true);
                     jjtc003 = false;
jjtn003.jjtSetVal(i1.image);
      } finally {
if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003, true);
                     }
      }

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        i2 = jj_consume_token(IDENTIFIER);
SimpleNode jjtn004 = new SimpleNode(JJTIDENTIFIER);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
        try {
jjtree.closeNodeScope(jjtn004, true);
                         jjtc004 = false;
jjtn004.jjtSetVal(i2.image);
        } finally {
if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004, true);
                         }
        }
        s2 = jj_consume_token(SEMICOLON);
SimpleNode jjtn005 = new SimpleNode(JJTSEMICOLON);
                        boolean jjtc005 = true;
                        jjtree.openNodeScope(jjtn005);
        try {
jjtree.closeNodeScope(jjtn005, true);
                        jjtc005 = false;
jjtn005.jjtSetVal(s2.image);
        } finally {
if (jjtc005) {
                          jjtree.closeNodeScope(jjtn005, true);
                        }
        }
        VariableAndStatement();
        break;
        }
      case SQUARELEFTBRACKET:
      case LEFTPARENTHESES:
      case DOT:
      case SEMICOLON:
      case EQUAL:
      case AND:
      case LESS:
      case PLUS:
      case MINUS:
      case MULT:
      case DIV:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUAL:{
          e = jj_consume_token(EQUAL);
SimpleNode jjtn006 = new SimpleNode(JJTEQUAL);
                               boolean jjtc006 = true;
                               jjtree.openNodeScope(jjtn006);
          try {
jjtree.closeNodeScope(jjtn006, true);
                               jjtc006 = false;
jjtn006.jjtSetVal(e.image);
          } finally {
if (jjtc006) {
                                 jjtree.closeNodeScope(jjtn006, true);
                               }
          }
          Expression();
          break;
          }
        case SQUARELEFTBRACKET:{
          ArrAcc();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EQUAL:{
            e = jj_consume_token(EQUAL);
SimpleNode jjtn007 = new SimpleNode(JJTEQUAL);
                               boolean jjtc007 = true;
                               jjtree.openNodeScope(jjtn007);
            try {
jjtree.closeNodeScope(jjtn007, true);
                               jjtc007 = false;
jjtn007.jjtSetVal(e.image);
            } finally {
if (jjtc007) {
                                 jjtree.closeNodeScope(jjtn007, true);
                               }
            }
            Expression();
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          break;
          }
        case LEFTPARENTHESES:
        case DOT:{
          ObjAcc();
          ExpressionTail();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          ExpressionTail();
        }
        s2 = jj_consume_token(SEMICOLON);
SimpleNode jjtn008 = new SimpleNode(JJTSEMICOLON);
                            boolean jjtc008 = true;
                            jjtree.openNodeScope(jjtn008);
        try {
jjtree.closeNodeScope(jjtn008, true);
                            jjtc008 = false;
jjtn008.jjtSetVal(s2.image);
        } finally {
if (jjtc008) {
                              jjtree.closeNodeScope(jjtn008, true);
                            }
        }
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case WHILE:
          case LEFTBRACKET:
          case LEFTPARENTHESES:
          case TRUE:
          case FALSE:
          case NEG:
          case THIS:
          case NEW:
          case IDENTIFIER:
          case INTEGERLITERAL:{
            ;
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            break label_4;
          }
          Statement();
        }
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case LEFTBRACKET:
      case LEFTPARENTHESES:
      case TRUE:
      case FALSE:
      case NEG:
      case THIS:
      case NEW:
      case INTEGERLITERAL:{
        LiteralStatement();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case WHILE:
          case LEFTBRACKET:
          case LEFTPARENTHESES:
          case TRUE:
          case FALSE:
          case NEG:
          case THIS:
          case NEW:
          case IDENTIFIER:
          case INTEGERLITERAL:{
            ;
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            break label_5;
          }
          Statement();
        }
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    }
  }

  static final public void MethodBody() throws ParseException {Token r, s;
    VariableAndStatement();
    r = jj_consume_token(RETURN);
SimpleNode jjtn001 = new SimpleNode(JJTRETURN);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
    try {
jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
jjtn001.jjtSetVal(r.image);
    } finally {
if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
    }
    Expression();
    s = jj_consume_token(SEMICOLON);
SimpleNode jjtn002 = new SimpleNode(JJTSEMICOLON);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
    try {
jjtree.closeNodeScope(jjtn002, true);
                   jjtc002 = false;
jjtn002.jjtSetVal(s.image);
    } finally {
if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
    }
  }

  static final public void ClassDeclaration() throws ParseException {/*@bgen(jjtree) ClassDeclaration */
                                             SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATION);
                                             boolean jjtc000 = true;
                                             jjtree.openNodeScope(jjtn000);Token i1, e, i2, l, r;
    try {
      jj_consume_token(CLASS);
      i1 = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTCLASSNAME);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
jjtn001.jjtSetVal(i1.image);
      } finally {
if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
      }

      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXTENDS:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_6;
        }
        e = jj_consume_token(EXTENDS);
SimpleNode jjtn002 = new SimpleNode(JJTEXTENDS);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
jjtn002.jjtSetVal(e.image);
        } finally {
if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                     }
        }
        i2 = jj_consume_token(IDENTIFIER);
SimpleNode jjtn003 = new SimpleNode(JJTCLASSNAME);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
        try {
jjtree.closeNodeScope(jjtn003, true);
                         jjtc003 = false;
jjtn003.jjtSetVal(i2.image);
        } finally {
if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003, true);
                         }
        }
      }
      l = jj_consume_token(LEFTBRACKET);
SimpleNode jjtn004 = new SimpleNode(JJTLEFTBRACKET);
                     boolean jjtc004 = true;
                     jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004, true);
                     jjtc004 = false;
jjtn004.jjtSetVal(l.image);
      } finally {
if (jjtc004) {
                       jjtree.closeNodeScope(jjtn004, true);
                     }
      }

      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case INT:
        case STRING:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_7;
        }
        VarDeclaration();
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_8;
        }
        MethodDeclaration();
      }
      r = jj_consume_token(RIGHTBRACKET);
SimpleNode jjtn005 = new SimpleNode(JJTRIGHTBRACKET);
                      boolean jjtc005 = true;
                      jjtree.openNodeScope(jjtn005);
      try {
jjtree.closeNodeScope(jjtn005, true);
                      jjtc005 = false;
jjtn005.jjtSetVal(r.image);
      } finally {
if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005, true);
                      }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void CommonStatement() throws ParseException {Token lb, rb;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFTBRACKET:{
      lb = jj_consume_token(LEFTBRACKET);
SimpleNode jjtn001 = new SimpleNode(JJTLEFTBRACKET);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
jjtn001.jjtSetVal(lb.image);
      } finally {
if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
      }

      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case LEFTBRACKET:
        case LEFTPARENTHESES:
        case TRUE:
        case FALSE:
        case NEG:
        case THIS:
        case NEW:
        case IDENTIFIER:
        case INTEGERLITERAL:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_9;
        }
        Statement();
      }
      rb = jj_consume_token(RIGHTBRACKET);
SimpleNode jjtn002 = new SimpleNode(JJTRIGHTBRACKET);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                       jjtc002 = false;
jjtn002.jjtSetVal(rb.image);
      } finally {
if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002, true);
                       }
      }
      break;
      }
    case IF:{
      IfStatement();
      break;
      }
    case WHILE:{
      WhileStatement();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case WHILE:
    case LEFTBRACKET:{
      CommonStatement();
      break;
      }
    case LEFTPARENTHESES:
    case TRUE:
    case FALSE:
    case NEG:
    case THIS:
    case NEW:
    case IDENTIFIER:
    case INTEGERLITERAL:{
      LineStatement();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void LiteralStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case WHILE:
    case LEFTBRACKET:{
      CommonStatement();
      break;
      }
    case LEFTPARENTHESES:
    case TRUE:
    case FALSE:
    case NEG:
    case THIS:
    case NEW:
    case INTEGERLITERAL:{
      LiteralLineStatement();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void LineStatement() throws ParseException {/*@bgen(jjtree) LineStatement */
                        SimpleNode jjtn000 = new SimpleNode(JJTLINESTATEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token i, e, s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTPARENTHESES:
      case TRUE:
      case FALSE:
      case NEG:
      case THIS:
      case NEW:
      case INTEGERLITERAL:{
        LiteralExpr4();
        ExpressionTail();
        break;
        }
      case IDENTIFIER:{
        i = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIER);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
jjtn001.jjtSetVal(i.image);
        } finally {
if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
        }

        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUAL:{
          e = jj_consume_token(EQUAL);
SimpleNode jjtn002 = new SimpleNode(JJTEQUAL);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
          try {
jjtree.closeNodeScope(jjtn002, true);
                           jjtc002 = false;
jjtn002.jjtSetVal(e.image);
          } finally {
if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
          }
          Expression();
          break;
          }
        case SQUARELEFTBRACKET:{
          ArrAcc();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EQUAL:{
            e = jj_consume_token(EQUAL);
SimpleNode jjtn003 = new SimpleNode(JJTEQUAL);
                                      boolean jjtc003 = true;
                                      jjtree.openNodeScope(jjtn003);
            try {
jjtree.closeNodeScope(jjtn003, true);
                                      jjtc003 = false;
jjtn003.jjtSetVal(e.image);
            } finally {
if (jjtc003) {
                                        jjtree.closeNodeScope(jjtn003, true);
                                      }
            }
            Expression();
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            ;
          }
          break;
          }
        case LEFTPARENTHESES:
        case DOT:{
          ObjAcc();
          ExpressionTail();
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          ExpressionTail();
        }
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s = jj_consume_token(SEMICOLON);
SimpleNode jjtn004 = new SimpleNode(JJTSEMICOLON);
                   boolean jjtc004 = true;
                   jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004, true);
                   jjtc004 = false;
jjtn004.jjtSetVal(s.image);
      } finally {
if (jjtc004) {
                     jjtree.closeNodeScope(jjtn004, true);
                   }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void LiteralLineStatement() throws ParseException {/*@bgen(jjtree) LiteralLineStatement */
                               SimpleNode jjtn000 = new SimpleNode(JJTLITERALLINESTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token i, e, s;
    try {
      LiteralExpr4();
      ExpressionTail();
      s = jj_consume_token(SEMICOLON);
SimpleNode jjtn001 = new SimpleNode(JJTSEMICOLON);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
jjtn001.jjtSetVal(s.image);
      } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExpressionTail() throws ParseException {
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_10;
      }
      Oper4();
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_11;
      }
      Oper3();
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LESS:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_12;
      }
      Oper2();
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        break label_13;
      }
      Oper1();
    }
  }

  static final public void Statement1() throws ParseException {Token e, s, slb, srb;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      e = jj_consume_token(EQUAL);
SimpleNode jjtn001 = new SimpleNode(JJTEQUAL);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
jjtn001.jjtSetVal(e.image);
      } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
      }
      Expression();
      e = jj_consume_token(SEMICOLON);
SimpleNode jjtn002 = new SimpleNode(JJTSEMICOLON);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                       jjtc002 = false;
jjtn002.jjtSetVal(e.image);
      } finally {
if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002, true);
                       }
      }
      break;
      }
    case SQUARELEFTBRACKET:{
      slb = jj_consume_token(SQUARELEFTBRACKET);
SimpleNode jjtn003 = new SimpleNode(JJTSQUARELEFTBRACKET);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003, true);
                                 jjtc003 = false;
jjtn003.jjtSetVal(slb.image);
      } finally {
if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003, true);
                                 }
      }
      Expression();
      srb = jj_consume_token(SQUARERIGHTBRACKET);
SimpleNode jjtn004 = new SimpleNode(JJTSQUARERIGHTBRACKET);
                                  boolean jjtc004 = true;
                                  jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004, true);
                                  jjtc004 = false;
jjtn004.jjtSetVal(srb.image);
      } finally {
if (jjtc004) {
                                    jjtree.closeNodeScope(jjtn004, true);
                                  }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
        e = jj_consume_token(EQUAL);
SimpleNode jjtn005 = new SimpleNode(JJTEQUAL);
                       boolean jjtc005 = true;
                       jjtree.openNodeScope(jjtn005);
        try {
jjtree.closeNodeScope(jjtn005, true);
                       jjtc005 = false;
jjtn005.jjtSetVal(e.image);
        } finally {
if (jjtc005) {
                         jjtree.closeNodeScope(jjtn005, true);
                       }
        }
        Expression();
        s = jj_consume_token(SEMICOLON);
SimpleNode jjtn006 = new SimpleNode(JJTSEMICOLON);
                           boolean jjtc006 = true;
                           jjtree.openNodeScope(jjtn006);
        try {
jjtree.closeNodeScope(jjtn006, true);
                           jjtc006 = false;
jjtn006.jjtSetVal(s.image);
        } finally {
if (jjtc006) {
                             jjtree.closeNodeScope(jjtn006, true);
                           }
        }
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      break;
      }
    case LEFTPARENTHESES:
    case DOT:{
      ObjAcc();
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IfStatement() throws ParseException {/*@bgen(jjtree) IfStatement */
                      SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token i, lp, rp, e;
    try {
      i = jj_consume_token(IF);
SimpleNode jjtn001 = new SimpleNode(JJTIF);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
jjtn001.jjtSetVal(i.image);
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
      lp = jj_consume_token(LEFTPARENTHESES);
SimpleNode jjtn002 = new SimpleNode(JJTLEFTPARENTHESES);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
jjtn002.jjtSetVal(lp.image);
      } finally {
if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
      }
      Expression();
      rp = jj_consume_token(RIGHTPARENTHESES);
SimpleNode jjtn003 = new SimpleNode(JJTRIGHTPARENTHESES);
                           boolean jjtc003 = true;
                           jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003, true);
                           jjtc003 = false;
jjtn003.jjtSetVal(rp.image);
      } finally {
if (jjtc003) {
                             jjtree.closeNodeScope(jjtn003, true);
                           }
      }
      Statement();
      e = jj_consume_token(ELSE);
SimpleNode jjtn004 = new SimpleNode(JJTELSE);
              boolean jjtc004 = true;
              jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004, true);
              jjtc004 = false;
jjtn004.jjtSetVal(e.image);
      } finally {
if (jjtc004) {
                jjtree.closeNodeScope(jjtn004, true);
              }
      }
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void WhileStatement() throws ParseException {/*@bgen(jjtree) WhileStatement */
                         SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token w, lp, rp;
    try {
      try {
        w = jj_consume_token(WHILE);
SimpleNode jjtn001 = new SimpleNode(JJTWHILE);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
jjtn001.jjtSetVal(w.image);
        } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
        }
        lp = jj_consume_token(LEFTPARENTHESES);
SimpleNode jjtn002 = new SimpleNode(JJTLEFTPARENTHESES);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002, true);
                              jjtc002 = false;
jjtn002.jjtSetVal(lp.image);
        } finally {
if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                              }
        }
      } catch (ParseException e) {

      }
      try {
        Expression();
        try {
          rp = jj_consume_token(RIGHTPARENTHESES);
SimpleNode jjtn003 = new SimpleNode(JJTRIGHTPARENTHESES);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
          try {
jjtree.closeNodeScope(jjtn003, true);
                                   jjtc003 = false;
jjtn003.jjtSetVal(rp.image);
          } finally {
if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003, true);
                                   }
          }
        } catch (ParseException e) {

        }
      } catch (ParseException e) {
System.out.println(e.toString());
        Token t;
        do {
            t = getToken(1);
            if(t.kind == LEFTBRACKET)
                break;
            getNextToken();
        } while (true);
      }
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Expression() throws ParseException {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr1();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          break label_14;
        }
        Oper1();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Oper1() throws ParseException {Token a;
    a = jj_consume_token(AND);
SimpleNode jjtn001 = new SimpleNode(JJTAND);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
    try {
jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
jjtn001.jjtSetVal(a.image);
    } finally {
if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
    }
    Expr1();
  }

  static final public void Expr1() throws ParseException {
    Expr2();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LESS:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_15;
      }
      Oper2();
    }
  }

  static final public void Oper2() throws ParseException {Token l;
    l = jj_consume_token(LESS);
SimpleNode jjtn001 = new SimpleNode(JJTLESS);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
    try {
jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
jjtn001.jjtSetVal(l.image);
    } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
    }
    Expr2();
  }

  static final public void Expr2() throws ParseException {
    Expr3();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_16;
      }
      Oper3();
    }
  }

  static final public void Oper3() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      t = jj_consume_token(PLUS);
SimpleNode jjtn001 = new SimpleNode(JJTPLUS);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
jjtn001.jjtSetVal(t.image);
      } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      Expr3();
      break;
      }
    case MINUS:{
      t = jj_consume_token(MINUS);
SimpleNode jjtn002 = new SimpleNode(JJTMINUS);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
               jjtc002 = false;
jjtn002.jjtSetVal(t.image);
      } finally {
if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
               }
      }
      Expr3();
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expr3() throws ParseException {
    Expr4();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_17;
      }
      Oper4();
    }
  }

  static final public void Oper4() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULT:{
      t = jj_consume_token(MULT);
SimpleNode jjtn001 = new SimpleNode(JJTMULT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
jjtn001.jjtSetVal(t.image);
      } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      Expr4();
      break;
      }
    case DIV:{
      t = jj_consume_token(DIV);
SimpleNode jjtn002 = new SimpleNode(JJTDIV);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
             jjtc002 = false;
jjtn002.jjtSetVal(t.image);
      } finally {
if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
             }
      }
      Expr4();
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expr4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFTPARENTHESES:
    case TRUE:
    case FALSE:
    case NEG:
    case THIS:
    case NEW:
    case INTEGERLITERAL:{
      LiteralExpr4();
      break;
      }
    case IDENTIFIER:{
      IdentifierExpr4();
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void LiteralExpr4() throws ParseException {Token t, t2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGERLITERAL:{
      t = jj_consume_token(INTEGERLITERAL);
SimpleNode jjtn001 = new SimpleNode(JJTINTEGER);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
jjtn001.jjtSetVal(t.image);
      } finally {
if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
      }

      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SQUARELEFTBRACKET:
        case LEFTPARENTHESES:
        case DOT:{
          ;
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          break label_18;
        }
        ExprTail();
      }
      break;
      }
    case TRUE:{
      t = jj_consume_token(TRUE);
SimpleNode jjtn002 = new SimpleNode(JJTBOOLEAN);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
               jjtc002 = false;
jjtn002.jjtSetVal(t.image);
      } finally {
if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
               }
      }

      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SQUARELEFTBRACKET:
        case LEFTPARENTHESES:
        case DOT:{
          ;
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          break label_19;
        }
        ExprTail();
      }
      break;
      }
    case FALSE:{
      t = jj_consume_token(FALSE);
SimpleNode jjtn003 = new SimpleNode(JJTBOOLEAN);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003, true);
                jjtc003 = false;
jjtn003.jjtSetVal(t.image);
      } finally {
if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003, true);
                }
      }

      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SQUARELEFTBRACKET:
        case LEFTPARENTHESES:
        case DOT:{
          ;
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          break label_20;
        }
        ExprTail();
      }
      break;
      }
    case THIS:{
      t = jj_consume_token(THIS);
SimpleNode jjtn004 = new SimpleNode(JJTTHIS);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004, true);
               jjtc004 = false;
jjtn004.jjtSetVal(t.image);
      } finally {
if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004, true);
               }
      }

      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SQUARELEFTBRACKET:
        case LEFTPARENTHESES:
        case DOT:{
          ;
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          break label_21;
        }
        ExprTail();
      }
      break;
      }
    case NEW:{
      t = jj_consume_token(NEW);
SimpleNode jjtn005 = new SimpleNode(JJTNEW);
              boolean jjtc005 = true;
              jjtree.openNodeScope(jjtn005);
      try {
jjtree.closeNodeScope(jjtn005, true);
              jjtc005 = false;
jjtn005.jjtSetVal(t.image);
      } finally {
if (jjtc005) {
                jjtree.closeNodeScope(jjtn005, true);
              }
      }
      NewExpr();
      break;
      }
    case LEFTPARENTHESES:{
      t = jj_consume_token(LEFTPARENTHESES);
SimpleNode jjtn006 = new SimpleNode(JJTLEFTPARENTHESES);
                          boolean jjtc006 = true;
                          jjtree.openNodeScope(jjtn006);
      try {
jjtree.closeNodeScope(jjtn006, true);
                          jjtc006 = false;
jjtn006.jjtSetVal(t.image);
      } finally {
if (jjtc006) {
                            jjtree.closeNodeScope(jjtn006, true);
                          }
      }
      Expression();
      t2 = jj_consume_token(RIGHTPARENTHESES);
SimpleNode jjtn007 = new SimpleNode(JJTRIGHTPARENTHESES);
                               boolean jjtc007 = true;
                               jjtree.openNodeScope(jjtn007);
      try {
jjtree.closeNodeScope(jjtn007, true);
                               jjtc007 = false;
jjtn007.jjtSetVal(t2.image);
      } finally {
if (jjtc007) {
                                 jjtree.closeNodeScope(jjtn007, true);
                               }
      }

      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SQUARELEFTBRACKET:
        case LEFTPARENTHESES:
        case DOT:{
          ;
          break;
          }
        default:
          jj_la1[48] = jj_gen;
          break label_22;
        }
        ExprTail();
      }
      break;
      }
    case NEG:{
      t = jj_consume_token(NEG);
SimpleNode jjtn008 = new SimpleNode(JJTNEGATION);
              boolean jjtc008 = true;
              jjtree.openNodeScope(jjtn008);
      try {
jjtree.closeNodeScope(jjtn008, true);
              jjtc008 = false;
jjtn008.jjtSetVal(t.image);
      } finally {
if (jjtc008) {
                jjtree.closeNodeScope(jjtn008, true);
              }
      }
      Expr4();
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IdentifierExpr4() throws ParseException {Token t;
    t = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIER);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
    try {
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
jjtn001.jjtSetVal(t.image);
    } finally {
if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
    }

    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SQUARELEFTBRACKET:
      case LEFTPARENTHESES:
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        break label_23;
      }
      ExprTail();
    }
  }

  static final public void ExprTail() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SQUARELEFTBRACKET:{
      ArrAcc();
      break;
      }
    case LEFTPARENTHESES:
    case DOT:{
      ObjAcc();
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ArrAcc() throws ParseException {Token t1, t2;
    t1 = jj_consume_token(SQUARELEFTBRACKET);
SimpleNode jjtn001 = new SimpleNode(JJTSQUARELEFTBRACKET);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
    try {
jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
jjtn001.jjtSetVal(t1.image);
    } finally {
if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
    }
    Expression();
    t2 = jj_consume_token(SQUARERIGHTBRACKET);
SimpleNode jjtn002 = new SimpleNode(JJTSQUARERIGHTBRACKET);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
    try {
jjtree.closeNodeScope(jjtn002, true);
                             jjtc002 = false;
jjtn002.jjtSetVal(t2.image);
    } finally {
if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                             }
    }
  }

  static final public void ObjAcc() throws ParseException {Token t, l, r;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFTPARENTHESES:{
      l = jj_consume_token(LEFTPARENTHESES);
SimpleNode jjtn001 = new SimpleNode(JJTLEFTPARENTHESES);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
jjtn001.jjtSetVal(l.image);
      } finally {
if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTPARENTHESES:
      case TRUE:
      case FALSE:
      case NEG:
      case THIS:
      case NEW:
      case IDENTIFIER:
      case INTEGERLITERAL:{
        Expression();
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      r = jj_consume_token(RIGHTPARENTHESES);
SimpleNode jjtn002 = new SimpleNode(JJTRIGHTPARENTHESES);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                              jjtc002 = false;
jjtn002.jjtSetVal(r.image);
      } finally {
if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                              }
      }
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    t = jj_consume_token(DOT);
SimpleNode jjtn003 = new SimpleNode(JJTDOT);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
    try {
jjtree.closeNodeScope(jjtn003, true);
             jjtc003 = false;
jjtn003.jjtSetVal(t.image);
    } finally {
if (jjtc003) {
               jjtree.closeNodeScope(jjtn003, true);
             }
    }
    ObjAccTail();
  }

  static final public void ObjAccTail() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LENGTH:{
      t = jj_consume_token(LENGTH);
SimpleNode jjtn001 = new SimpleNode(JJTLENGTH);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
jjtn001.jjtSetVal(t.image);
      } finally {
if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
      }
      break;
      }
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFIER);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
jjtn002.jjtSetVal(t.image);
      } finally {
if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
      }
      Args();
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Args() throws ParseException {Token t1, t2;
    t1 = jj_consume_token(LEFTPARENTHESES);
SimpleNode jjtn001 = new SimpleNode(JJTLEFTPARENTHESES);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
    try {
jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
jjtn001.jjtSetVal(t1.image);
    } finally {
if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFTPARENTHESES:
    case TRUE:
    case FALSE:
    case NEG:
    case THIS:
    case NEW:
    case IDENTIFIER:
    case INTEGERLITERAL:{
      Expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        OptArgs();
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    t2 = jj_consume_token(RIGHTPARENTHESES);
SimpleNode jjtn002 = new SimpleNode(JJTRIGHTPARENTHESES);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
    try {
jjtree.closeNodeScope(jjtn002, true);
                           jjtc002 = false;
jjtn002.jjtSetVal(t2.image);
    } finally {
if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
    }
  }

  static final public void OptArgs() throws ParseException {Token t;
    t = jj_consume_token(COMMA);
SimpleNode jjtn001 = new SimpleNode(JJTCOMMA);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
    try {
jjtree.closeNodeScope(jjtn001, true);
               jjtc001 = false;
jjtn001.jjtSetVal(t.image);
    } finally {
if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
    }
    Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      OptArgs();
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      ;
    }
  }

  static final public void NewExpr() throws ParseException {/*@bgen(jjtree) NewExpr */
                  SimpleNode jjtn000 = new SimpleNode(JJTNEWEXPR);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token i, l, r;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        i = jj_consume_token(INT);
SimpleNode jjtn001 = new SimpleNode(JJTINTEGER);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
jjtn001.jjtSetVal(i.image);
        } finally {
if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
        }
        l = jj_consume_token(SQUARELEFTBRACKET);
SimpleNode jjtn002 = new SimpleNode(JJTSQUARELEFTBRACKET);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002, true);
                           jjtc002 = false;
jjtn002.jjtSetVal(l.image);
        } finally {
if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
        }
        Expression();
        r = jj_consume_token(SQUARERIGHTBRACKET);
SimpleNode jjtn003 = new SimpleNode(JJTSQUARERIGHTBRACKET);
                            boolean jjtc003 = true;
                            jjtree.openNodeScope(jjtn003);
        try {
jjtree.closeNodeScope(jjtn003, true);
                            jjtc003 = false;
jjtn003.jjtSetVal(r.image);
        } finally {
if (jjtc003) {
                              jjtree.closeNodeScope(jjtn003, true);
                            }
        }
        break;
        }
      case IDENTIFIER:{
        i = jj_consume_token(IDENTIFIER);
SimpleNode jjtn004 = new SimpleNode(JJTIDENTIFIER);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
        try {
jjtree.closeNodeScope(jjtn004, true);
                    jjtc004 = false;
jjtn004.jjtSetVal(i.image);
        } finally {
if (jjtc004) {
                      jjtree.closeNodeScope(jjtn004, true);
                    }
        }
        l = jj_consume_token(LEFTPARENTHESES);
SimpleNode jjtn005 = new SimpleNode(JJTLEFTPARENTHESES);
                         boolean jjtc005 = true;
                         jjtree.openNodeScope(jjtn005);
        try {
jjtree.closeNodeScope(jjtn005, true);
                         jjtc005 = false;
jjtn005.jjtSetVal(l.image);
        } finally {
if (jjtc005) {
                           jjtree.closeNodeScope(jjtn005, true);
                         }
        }
        r = jj_consume_token(RIGHTPARENTHESES);
SimpleNode jjtn006 = new SimpleNode(JJTRIGHTPARENTHESES);
                          boolean jjtc006 = true;
                          jjtree.openNodeScope(jjtn006);
        try {
jjtree.closeNodeScope(jjtn006, true);
                          jjtc006 = false;
jjtn006.jjtSetVal(r.image);
        } finally {
if (jjtc006) {
                            jjtree.closeNodeScope(jjtn006, true);
                          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFTPARENTHESES:
        case DOT:{
          ObjAcc();
          break;
          }
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavammTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[60];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x400,0x8000,0x0,0x0,0x200000,0x3200000,0x800000,0x0,0x100000,0x0,0x8000,0x800000,0x0,0x4000000,0x5300000,0x225000,0xff300000,0x225000,0x225000,0x0,0x800,0x0,0x100,0x225000,0x25000,0x225000,0x225000,0x4000000,0x5300000,0x200000,0x80000000,0x60000000,0x10000000,0x8000000,0x4000000,0x5300000,0x8000000,0x10000000,0x60000000,0x60000000,0x80000000,0x80000000,0x200000,0x1300000,0x1300000,0x1300000,0x1300000,0x1300000,0x200000,0x1300000,0x1300000,0x200000,0x200000,0x0,0x800000,0x200000,0x800000,0x1200000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x780,0x780,0x0,0x0,0x0,0x780,0x0,0x380,0x380,0x0,0x380,0x0,0x0,0x183e,0x801,0x183e,0x103e,0xb80,0x0,0x380,0x0,0x183e,0x0,0x183e,0x103e,0x0,0x0,0x183e,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x183e,0x0,0x0,0x0,0x0,0x0,0x103e,0x0,0x0,0x183e,0x0,0x840,0x0,0x183e,0x0,0x0,0x900,};
   }

  /** Constructor with InputStream. */
  public Javamm(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Javamm(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavammTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Javamm(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavammTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Javamm(JavammTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JavammTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 60; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
