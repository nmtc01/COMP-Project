options
{
 LOOKAHEAD=1;
}
PARSER_BEGIN(Javamm)
public class Javamm
{
    public static void main(String args[]) throws ParseException {

        Javamm myJavamm = new Javamm(System.in);
        SimpleNode root = myJavamm.JavaMM(); // returns reference to root node

        //System.out.println("Expression value: "+myJavamm.eval(root));

        root.dump(""); // prints the tree on the screen
    }
}
PARSER_END(Javamm)
SKIP :
{
" " | "\r" | "\t" | "\n"
}
TOKEN: 
{
      < IMPORT : "import" > 
    | < PUBLIC : "public" >
    | < RETURN: "return" >
    | < CLASS: "class" >
    | < EXTENDS: "extends" >
    | < IF: "if" >
    | < ELSE: "else" >
    | < WHILE: "while" > 
    | < STATIC: "static" >
    | < MAIN: "main" >
    
    //Brackets
    | < LEFTBRACKET : "{" >
    | < RIGHTBRACKET : "}" >
    | < SQUARERIGHTBRACKET : "]" >
    | < SQUARELEFTBRACKET : "[" >
    | < LEFTPARENTHESES : "(" >
    | < RIGHTPARENTHESES : ")" >
    | < COMMA : "," >
    | < DOT : "." >
    | < SEMICOLON : ";" >
    | < EQUAL: "=" >

    //Operations
    | < AND: "&&" >
    | < LESS: "<" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < MULT: "*" >
    | < DIV: "/" >
    | < TRUE: "true" >
    | < FALSE: "false" >
    | < NEG: "!" >

    //Special
    | < THIS: "this" >
    | < NEW: "new" >
    | < LENGTH: "length" >

    //Types
    | < BOOLEAN: "boolean" >
    | < INT: "int" >
    | < STRING: "String" >
    | < VOID: "void" >

    // Java valid identifiers / literals
    | < IDENTIFIER : ("_")(["a"-"z", "A"-"Z", "0"-"9", "_"])+ | ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9", "_"])* >
    | < INTEGERLITERAL : (((["+","-"])?(["0"-"9"])+)|("0x"(["0"-"9","a"-"f","A"-"F"])+)|("0b"(["0","1"])+)) >
}

SimpleNode JavaMM() : {}
{
    (ImportDeclaration())* (ClassDeclaration())+ <EOF> {return jjtThis;} // Java code inside brackets
}

void ImportDeclaration() #void: {}
{
    <IMPORT> <IDENTIFIER> ImportDeclaration1()
}

void ImportDeclaration1() #void: {} 
{
    <DOT> <IDENTIFIER> ImportDeclaration1()
    | 
    [
        <LEFTPARENTHESES> [ Type() ImportDeclaration2() ] <RIGHTPARENTHESES> [ ":" Type() ]
    ] <SEMICOLON>
}

void ImportDeclaration2() #void: {}
{
    [
        <SEMICOLON> Type() ImportDeclaration2()
    ]
}

void Type() #void: {Token t;}
{
    (t=<BOOLEAN>| t=<STRING>| t=<INT>){jjtThis.jjtSetVal(t.image);} #Type

}

void MethodDeclaration() : {}
{
    <PUBLIC> (
        Type() <IDENTIFIER>
        <LEFTPARENTHESES> 
            MethodArguments() 
        <RIGHTPARENTHESES> 
        <LEFTBRACKET> 
            MethodBody()
        <RIGHTBRACKET>
        | MainDeclaration()   
    )
}

void MainDeclaration() : {}
{
    <STATIC> <VOID> <MAIN> <LEFTPARENTHESES> <STRING> <SQUARELEFTBRACKET> <SQUARERIGHTBRACKET> <IDENTIFIER>
        <RIGHTPARENTHESES>
        <LEFTBRACKET>
        VariableAndStatement()
        <RIGHTBRACKET>

}
void MethodArguments() : {}
{
    [Type() <IDENTIFIER> ( <COMMA> Type() <IDENTIFIER> )*]
}

void VarDeclaration() #VariableDeclaration : {Token t;}
{
    Type() 
    t=<IDENTIFIER>{ jjtThis.jjtSetVal(t.image);} #VariableName
    <SEMICOLON>
}

void VariableAndStatement() #void : {}
{
    (VarDeclaration())* (Statement())*
}

void MethodBody() : {}
{
   VariableAndStatement()  <RETURN> Expression() <SEMICOLON>
}

void ClassDeclaration() : {}
{
    <CLASS> <IDENTIFIER> 
    (<EXTENDS> <IDENTIFIER>)* 
    <LEFTBRACKET> 
        (VarDeclaration())* 
        (MethodDeclaration())* 
    <RIGHTBRACKET>
}


void Statement() : {}
{
    <LEFTBRACKET> (Statement())* <RIGHTBRACKET> 
    | IfStatement() 
    | WhileStatement() 
    | LineStatement()
}

void LineStatement() : {}
{
    (
        LiteralExpr4() ExpressionTail()
        |
        (
            <IDENTIFIER> (
                <EQUAL> Expression()
                |
                (ArrAcc() [<EQUAL> Expression()])
                |
                (ObjAcc() ExpressionTail())
                |
                ExpressionTail()
            )
        )
    )
    <SEMICOLON>
}

void ExpressionTail() : {}
{
    (Oper4())* (Oper3())* (Oper2())* (Oper1())*
}

void Statement1() : {}
{
    (<EQUAL> Expression() <SEMICOLON>) 
    | ( <SQUARELEFTBRACKET> Expression() <SQUARERIGHTBRACKET> [<EQUAL> Expression() <SEMICOLON>])
    | ObjAcc()
}

void IfStatement() : {}
{
    <IF> <LEFTPARENTHESES> Expression() <RIGHTPARENTHESES>
    Statement()
    <ELSE> Statement()
}


// void error_skipto(int kind){
//     ParseException e = generateParseException();  // generate the exception object.
//     System.out.println(e.toString());  // print the error message
//     Token t;
//     do {
//       t = getNextToken();
//     } while (t.kind != kind);
//       // The above loop consumes tokens all the way up to a token of
//       // "kind".  We use a do-while loop rather than a while because the
//       // current token is the one immediately before the erroneous token
//       // (in our case the token immediately before what should have been
//       // "if"/"while".
//   }


void WhileStatement() : {}
{
    try{
        <WHILE> <LEFTPARENTHESES>
    }catch(ParseException e){
        //t = getNextToken();       
    }

    try {
        Expression() 
        try{
            <RIGHTPARENTHESES>
        }catch(ParseException e) {
            //t = getNextToken();
        }
    }
    catch (ParseException e) {
        System.out.println(e.toString());
        Token t;
        do {
            t = getToken(1);
            if(t.kind == LEFTBRACKET)
                break;
            getNextToken();
        } while (true);        
    }

    Statement()
}

void Expression() : {} 
{
    Expr1() (Oper1())*
}

void Oper1() : {} 
{
    <AND> Expr1() 
}

void Expr1() : {}
{
    Expr2() (Oper2())*
}

void Oper2() : {}
{
    <LESS> Expr2() 
}

void Expr2() : {}
{
    Expr3() (Oper3())*
}

void Oper3() : {}
{
    <PLUS> Expr3() |
    <MINUS> Expr3() 
}

void Expr3() : {}
{
    Expr4() (Oper4())*
}

void Oper4() : {}
{
    <MULT> Expr4()  |
    <DIV> Expr4() 
}

void Expr4() : {}
{
    IdentifierExpr4() |
    LiteralExpr4()
}

void LiteralExpr4() : {}
{
    <INTEGERLITERAL> (ExprTail())* |
    <TRUE> (ExprTail())* |
    <FALSE> (ExprTail())* |
    <THIS> (ExprTail())* |
    <NEW> NewExpr() |
    <LEFTPARENTHESES> Expression() <RIGHTPARENTHESES> (ExprTail())* |
    <NEG> Expr4() 
}

void IdentifierExpr4() : {}
{
    <IDENTIFIER> (ExprTail())*
}

void ExprTail() : {}
{
    ArrAcc() | ObjAcc()
}

void ArrAcc() : {}
{
    <SQUARELEFTBRACKET> Expression() <SQUARERIGHTBRACKET>
}

void ObjAcc() : {}
{
    <DOT> ObjAccTail()
}

void ObjAccTail() : {}
{
    <LENGTH> | 
    <IDENTIFIER> Args()
}

void Args() : {} 
{
    <LEFTPARENTHESES> Expression() OptArgs()
}

void OptArgs() : {}
{
    <COMMA> Expression() OptArgs()
    | <RIGHTPARENTHESES>
}

void NewExpr() : {}
{
    <INT> <SQUARELEFTBRACKET> Expression() <SQUARERIGHTBRACKET> |
    <IDENTIFIER> <LEFTPARENTHESES> <RIGHTBRACKET>
}