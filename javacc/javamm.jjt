options
{
 LOOKAHEAD=1;
}

PARSER_BEGIN(Javamm)
public class Javamm
{ 
    public static void main(String args[]) throws ParseException, java.io.FileNotFoundException {

        ParseException.resetWhileErrors();
        Javamm myJavamm = new Javamm(new java.io.FileInputStream(args[0]));
        SimpleNode root = myJavamm.JavaMM(); // returns reference to root node
        int errors = ParseException.getWhileErrors();
        if(errors > 0){
            throw new ParseException("Errors"); 
        }

        //System.out.println("Expression value: "+myJavamm.eval(root));

        root.dump(""); // prints the tree on the screen
    }
}
PARSER_END(Javamm)

SKIP :
{                                   
" " | "\r" | "\t" | "\n"
|
<"//" (~["\n", "\r"])* ("\n" | "\r")>
|
<"/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
}

TOKEN: 
{
      < IMPORT : "import" > 
    | < PUBLIC : "public" >
    | < RETURN: "return" >
    | < CLASS: "class" >
    | < EXTENDS: "extends" >
    | < IF: "if" >
    | < ELSE: "else" >
    | < WHILE: "while" > 
    | < STATIC: "static" >
    | < MAIN: "main" >
    
    //Brackets
    | < LEFTBRACKET : "{" >
    | < RIGHTBRACKET : "}" >
    | < SQUARERIGHTBRACKET : "]" >
    | < SQUARELEFTBRACKET : "[" >
    | < LEFTPARENTHESES : "(" >
    | < RIGHTPARENTHESES : ")" >
    | < COMMA : "," >
    | < DOT : "." >
    | < SEMICOLON : ";" >
    | < EQUAL: "=" >

    //Operations
    | < AND: "&&" >
    | < LESS: "<" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < MULT: "*" >
    | < DIV: "/" >
    | < TRUE: "true" >
    | < FALSE: "false" >
    | < NEG: "!" >

    //Special
    | < THIS: "this" >
    | < NEW: "new" >
    | < LENGTH: "length" >

    //Types
    | < BOOLEAN: "boolean" >
    | < INT: "int" >
    | < STRING: "String" >
    | < VOID: "void" >

    // Java valid identifiers / literals
    | < IDENTIFIER : (["_", "$"])(["a"-"z", "A"-"Z", "0"-"9", "_", "$"])+ | ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9", "_", "$"])* >
    | < INTEGERLITERAL : ("0" | (["1"-"9"](["0"-"9"])*) | ("0x"(["0"-"9","a"-"f","A"-"F"])+) | ("0b"(["0","1"])+)) >
}

SimpleNode JavaMM() : {}
{
    (ImportDeclaration())* (ClassDeclaration())+ <EOF> {return jjtThis;} // Java code inside brackets
}

void ImportDeclaration() : {Token t, s;}
{
    <IMPORT> 
    [
        s=<STATIC>{jjtThis.jjtSetVal(s.image);} #Static
    ] 
    t=<IDENTIFIER>{jjtThis.jjtSetVal(t.image);} #Identifier 
    ImportDeclaration1()
}

void ImportDeclaration1() #void: {Token d, i, l, r;} 
{
    d=<DOT>{jjtThis.jjtSetVal(d.image);} #Dot
    i=<IDENTIFIER>{jjtThis.jjtSetVal(i.image);} #Identifier 
    ImportDeclaration1()
    | 
    [
        l=<LEFTPARENTHESES>{jjtThis.jjtSetVal(l.image);} #LeftParentheses
        [ TypeImport() ImportDeclaration2() ] 
        r=<RIGHTPARENTHESES>{jjtThis.jjtSetVal(r.image);} #RightParentheses
        [ TypeImport() ]
    ] 
    <SEMICOLON>
}

void ImportDeclaration2() #void: {Token s;}
{
    [
        s=<COMMA>{jjtThis.jjtSetVal(s.image);} #Comma 
        TypeImport() ImportDeclaration2()
    ]
}

void TypeImport() #void: {Token t;}
{
    Type() | t=<VOID>{jjtThis.jjtSetVal(t.image);} #TypeImport

}

void Type() #void: {Token t;}
{
    (t=<BOOLEAN>| 
     t=<STRING> | 
     t=<INT> [<SQUARELEFTBRACKET> <SQUARERIGHTBRACKET>]
    ){jjtThis.jjtSetVal(t.image);} #Type
}

void MethodDeclaration() : {Token p, i, lp, rp;}
{
    p=<PUBLIC>{jjtThis.jjtSetVal(p.image);} #Modifier{}
    (
        Type() i=<IDENTIFIER>{jjtThis.jjtSetVal(i.image);} #Identifier
        lp=<LEFTPARENTHESES>{jjtThis.jjtSetVal(lp.image);} #LeftParentheses
            MethodArguments() 
        rp=<RIGHTPARENTHESES>{jjtThis.jjtSetVal(rp.image);} #RightParentheses
        <LEFTBRACKET>
            MethodBody()
        <RIGHTBRACKET>
        | MainDeclaration()   
    )
}

void MainDeclaration() : {Token lp, rp, s, slb, srb, i;}
{
    <STATIC>
    <VOID>
    <MAIN>
    lp=<LEFTPARENTHESES>{jjtThis.jjtSetVal(lp.image);} #LeftParentheses
    s=<STRING>{jjtThis.jjtSetVal(s.image);} #Type 
    slb=<SQUARELEFTBRACKET>{jjtThis.jjtSetVal(slb.image);} #SquareLeftBracket 
    srb=<SQUARERIGHTBRACKET>{jjtThis.jjtSetVal(srb.image);} #SquareRightBracket 
    i=<IDENTIFIER>{jjtThis.jjtSetVal(i.image);} #Identifier 
    rp=<RIGHTPARENTHESES>{jjtThis.jjtSetVal(rp.image);} #RightParentheses
        <LEFTBRACKET>
        VariableAndStatement()
        <RIGHTBRACKET>

}

void MethodArguments() : {Token i1, c, i2;}
{
    [Type()
    i1=<IDENTIFIER>{jjtThis.jjtSetVal(i1.image);} #Identifier{} 
    ( 
        c=<COMMA>{jjtThis.jjtSetVal(c.image);} #Comma
        Type()
        i2=<IDENTIFIER>{jjtThis.jjtSetVal(i2.image);} #Identifier
    )*]
}

void VarDeclaration() #VariableDeclaration : {Token c, t;}
{
    (
        Type() | c=<IDENTIFIER>{jjtThis.jjtSetVal(c.image);} #ClassType
    )
    t=<IDENTIFIER>{jjtThis.jjtSetVal(t.image);} #VariableName
    <SEMICOLON>
}

void VariableAndStatement() #void : {Token i1, i2, s1, s2, e;}
{
    Type() 
    i1=<IDENTIFIER>{jjtThis.jjtSetVal(i1.image);} #VariableName 
    s1=<SEMICOLON>{jjtThis.jjtSetVal(s1.image);} #Semicolon 
    VariableAndStatement()
    |
    i1=<IDENTIFIER>{jjtThis.jjtSetVal(i1.image);} #Identifier{} 
    (
        i2=<IDENTIFIER>{jjtThis.jjtSetVal(i2.image);} #Identifier 
        s2=<SEMICOLON>{jjtThis.jjtSetVal(s2.image);} #Semicolon 
        VariableAndStatement()
        |
        (
            (
                (
                    e=<EQUAL>{jjtThis.jjtSetVal(e.image);} #Equal 
                    Expression()
                )
                |
                (ArrAcc() [
                    e=<EQUAL>{jjtThis.jjtSetVal(e.image);} #Equal 
                    Expression()
                    ])
                |
                (ObjAcc() ExpressionTail())
                |
                (ExpressionTail())
            ) 
            s2=<SEMICOLON>{jjtThis.jjtSetVal(s2.image);} #Semicolon
        ) (Statement())*
    )
    |
    [LiteralStatement() (Statement())*]
}

void MethodBody() #void : {Token r;}
{
    VariableAndStatement() 
    r=<RETURN>{jjtThis.jjtSetVal(r.image);}  #Return
    Expression() 
    <SEMICOLON>
}

void ClassDeclaration() #ClassDeclaration : {Token i1, e, i2;}
{
    <CLASS> 
    i1=<IDENTIFIER>{jjtThis.jjtSetVal(i1.image);} #ClassName{}
    (
        e=<EXTENDS>{jjtThis.jjtSetVal(e.image);} #Extends
        i2=<IDENTIFIER>{jjtThis.jjtSetVal(i2.image);} #ClassName
    )* 

    <LEFTBRACKET>
        (VarDeclaration())* 
        (MethodDeclaration())* 
    <RIGHTBRACKET>
}

void CommonStatement() #void: {Token lb, rb;}
{
    lb=<LEFTBRACKET>{jjtThis.jjtSetVal(lb.image);} #LeftBracket{}
    (Statement())* 
    rb=<RIGHTBRACKET>{jjtThis.jjtSetVal(rb.image);} #RightBracket
    | IfStatement() 
    | WhileStatement() 
}

void Statement() #void: {}
{
    CommonStatement()
    | LineStatement()
}

void LiteralStatement() #void : {}
{
    CommonStatement()
    | LiteralLineStatement()
}

void LineStatement() : {Token i, e;}
{
    (
        LiteralExpr4() ExpressionTail()
        |
        (
            i=<IDENTIFIER>{jjtThis.jjtSetVal(i.image);} #Identifier{} 
            (
                e=<EQUAL>{jjtThis.jjtSetVal(e.image);} #Equal 
                Expression()
                |
                (ArrAcc() [e=<EQUAL>{jjtThis.jjtSetVal(e.image);} #Equal Expression()])
                |
                (ObjAcc() ExpressionTail())
                |
                ExpressionTail()
            )
        )
    )
    <SEMICOLON>
}

void LiteralLineStatement() #void : {}
{
    LiteralExpr4() ExpressionTail()
    <SEMICOLON>
}

void ExpressionTail() #void : {}
{
    (Oper4())* (Oper3())* (Oper2())* (Oper1())*
}

void Statement1() #void : {Token e, s, slb, srb;}
{
    (
        e=<EQUAL>{jjtThis.jjtSetVal(e.image);} #Equal
        Expression() 
        e=<SEMICOLON>{jjtThis.jjtSetVal(e.image);} #Semicolon
    ) 
    | ( 
        slb=<SQUARELEFTBRACKET>{jjtThis.jjtSetVal(slb.image);} #SquareLeftBracket
        Expression() 
        srb=<SQUARERIGHTBRACKET>{jjtThis.jjtSetVal(srb.image);} #SquareRightBracket
        [
            e=<EQUAL>{jjtThis.jjtSetVal(e.image);} #Equal
            Expression() 
            s=<SEMICOLON>{jjtThis.jjtSetVal(s.image);} #Semicolon
        ])
    | ObjAcc()
}

void IfStatement() : {Token i, lp, rp, e;}
{
    i=<IF>{jjtThis.jjtSetVal(i.image);} #If
    lp=<LEFTPARENTHESES>{jjtThis.jjtSetVal(lp.image);} #LeftParentheses
    Expression() 
    rp=<RIGHTPARENTHESES>{jjtThis.jjtSetVal(rp.image);} #RightParentheses
    Statement()
    e=<ELSE>{jjtThis.jjtSetVal(e.image);} #Else
    Statement()
}

void WhileStatement() : {Token w, lp, rp;}
{
    try{
        w=<WHILE>{jjtThis.jjtSetVal(w.image);} #While
        lp=<LEFTPARENTHESES>{jjtThis.jjtSetVal(lp.image);} #LeftParentheses
    }catch(ParseException e){
        
        int errors = ParseException.getWhileErrors();
        if(errors >= 10){
            throw new ParseException("Too many errors"); 
        }
        ParseException.countError(); 
        
        System.out.println(e.getImportantMessage());
        Token p = getToken(0);
        if (p.kind == WHILE)
            if (getToken(1).kind != LEFTPARENTHESES)
            System.out.println("Missing '(' on line "+p.beginLine+", column "+p.beginColumn+".\n");
    }

    try {
        Expression() 
        try{
            rp=<RIGHTPARENTHESES>{jjtThis.jjtSetVal(rp.image);} #RightParentheses
        }catch(ParseException e) {

            int errors = ParseException.getWhileErrors();
            if(errors >= 10){
                throw new ParseException("Too many errors"); 
            }
            ParseException.countError(); 

            System.out.println(e.getImportantMessage());
            Token p = getToken(0);
            if (p.kind != RIGHTPARENTHESES)
                System.out.println("Missing ')' on line "+p.beginLine+", column "+p.beginColumn+".\n");
        }
    }
    catch (ParseException e) {
        int errors = ParseException.getWhileErrors();
        if(errors >= 10){
            throw new ParseException("Too many errors"); 
        }
        ParseException.countError(); 

        System.out.println(e.getImportantMessage());
        Token p = getToken(0);
        System.out.println("Error in Expression inside while statement.\n");

        Token t;
        do {
            t = getToken(1);
            if(t.kind == LEFTBRACKET)
                break;
            getNextToken();
        } while (true);        
    }

    Statement()
}

void Expression() : {} 
{
    Expr1() (Oper1())*
}

void Oper1() #void : {Token a;} 
{
    a=<AND>{jjtThis.jjtSetVal(a.image);} #And
    Expr1() 
}

void Expr1() #void : {}
{
    Expr2() (Oper2())*
}

void Oper2() #void : {Token l;}
{
    l=<LESS>{jjtThis.jjtSetVal(l.image);} #Less
    Expr2() 
}

void Expr2() #void : {}
{
    Expr3() (Oper3())*
}

void Oper3() #void : {Token t;}
{
    t=<PLUS>{jjtThis.jjtSetVal(t.image);} #Plus
    Expr3() |
    t=<MINUS>{jjtThis.jjtSetVal(t.image);} #Minus
    Expr3() 
}

void Expr3() #void : {}
{
    Expr4() (Oper4())*
}

void Oper4() #void : {Token t;}
{
    t=<MULT>{jjtThis.jjtSetVal(t.image);} #Mult
    Expr4() |
    t=<DIV>{jjtThis.jjtSetVal(t.image);} #Div
    Expr4() 
}

void Expr4() #void : {}
{
    LiteralExpr4() |
    IdentifierExpr4()
}

void LiteralExpr4() #void : {Token t, t2;}
{
    (t=<INTEGERLITERAL>{jjtThis.jjtSetVal(t.image);} #Integer{} 
        (ExprTail())*) |
    (t=<TRUE>{jjtThis.jjtSetVal(t.image);} #Boolean{}
        (ExprTail())*) |
    (t=<FALSE>{jjtThis.jjtSetVal(t.image);} #Boolean{} 
        (ExprTail())*) |
    (t=<THIS>{jjtThis.jjtSetVal(t.image);} #This{}
        (ExprTail())*) |
    (t=<NEW>{jjtThis.jjtSetVal(t.image);} #New
        NewExpr()) |
    (t=<LEFTPARENTHESES>{jjtThis.jjtSetVal(t.image);} #LeftParentheses
        Expression() 
        t2=<RIGHTPARENTHESES>{jjtThis.jjtSetVal(t2.image);} #RightParentheses{}
        (ExprTail())*) |
    (t=<NEG>{jjtThis.jjtSetVal(t.image);} #Negation 
        Expr4()) 
}

void IdentifierExpr4() #void : {Token t;}
{
    t=<IDENTIFIER>{jjtThis.jjtSetVal(t.image);} #Identifier{}
    (ExprTail())*
}

void ExprTail() #void : {}
{
    ArrAcc() | ObjAcc()
}
    
void ArrAcc() #void : {Token t1, t2;}
{
    t1=<SQUARELEFTBRACKET>{jjtThis.jjtSetVal(t1.image);} #SquareLeftBracket
    Expression() 
    t2=<SQUARERIGHTBRACKET>{jjtThis.jjtSetVal(t2.image);} #SquareRightBracket
}

void ObjAcc() #void : {Token t, l, r;}
{
    [l=<LEFTPARENTHESES>{jjtThis.jjtSetVal(l.image);} #LeftParentheses
    [
        Expression()]
        r=<RIGHTPARENTHESES>{jjtThis.jjtSetVal(r.image);} #RightParentheses
    ]
    t=<DOT>{jjtThis.jjtSetVal(t.image);} #Dot
    ObjAccTail()
}

void ObjAccTail() #void : {Token t;}
{
    t=<LENGTH>{jjtThis.jjtSetVal(t.image);} #Length
    | 
    t=<IDENTIFIER>{jjtThis.jjtSetVal(t.image);} #Identifier 
    Args()
}

void Args() #void : {Token t1, t2;} 
{
    t1=<LEFTPARENTHESES>{jjtThis.jjtSetVal(t1.image);} #LeftParentheses
    [Expression() [OptArgs()]]
    t2=<RIGHTPARENTHESES>{jjtThis.jjtSetVal(t2.image);} #RightParentheses
}

void OptArgs() #void : {Token t;}
{
    t=<COMMA>{jjtThis.jjtSetVal(t.image);} #Comma
    Expression() [OptArgs()]

}

void NewExpr() : {Token i, l, r;}
{
    i=<INT>{jjtThis.jjtSetVal(i.image);} #Integer
    l=<SQUARELEFTBRACKET>{jjtThis.jjtSetVal(l.image);} #SquareLeftBracket
    Expression() 
    r=<SQUARERIGHTBRACKET>{jjtThis.jjtSetVal(r.image);} #SquareRightBracket
    |
    i=<IDENTIFIER>{jjtThis.jjtSetVal(i.image);} #Identifier
    l=<LEFTPARENTHESES>{jjtThis.jjtSetVal(l.image);} #LeftParentheses
    r=<RIGHTPARENTHESES>{jjtThis.jjtSetVal(r.image);} #RightParentheses
    [ObjAcc()]
}