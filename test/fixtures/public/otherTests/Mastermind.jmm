import static MathUtils.random(int, int) int;
import static MastermindAux.getMaxColors() int;
import static MastermindAux.getUserInput(int) int[];
import static MastermindAux.menu();
import static MastermindAux.printResult(int[]);

import static MastermindAux.printWinMessage();
import static MastermindAux.printLoseMessage();

class Mastermind {
    public static void main(String[] args){
        Mastermind mastermind;

        mastermind = new Mastermind();
        
        mastermind.play();
    }

    public int play(){
        boolean play;
        int[] result;
        int[] secretCode;
        int[] userInput;
        int max_tries;
        boolean _break;

        MastermindAux.menu();

        secretCode = this.generateSecretCode();

        max_tries = 10;

        _break = false;
        while(!_break && (0 < max_tries)){
            userInput = MastermindAux.getUserInput(secretCode.length);

            result = this.getFeedback(secretCode, userInput); 

            if(this.equal(result[0], secretCode.length)){
                _break = true;
            }else{
                MastermindAux.printResult(result);
            }
            if(!_break)
                max_tries = max_tries-1;
            else{}
        }

        if(0 < max_tries){
            MastermindAux.printWinMessage();
        }else{
            MastermindAux.printLoseMessage();
        }

        return 0;
    }
 
    public int[] generateSecretCode() {
        int maxColors;
        int index;
        int numberOfPegs;
        int i;
        int[] result;

        numberOfPegs = 4;
        maxColors = MastermindAux.getMaxColors();
        result = new int[numberOfPegs];

        i = 0;

        while(i<numberOfPegs)
        {
            index = MathUtils.random(0, maxColors-1);
            result[i] = index;
            i = i+1;
        }

        return result;
    }

    public boolean equal(int x, int y){
        boolean b;

        b = true;

        if(x < y){
            b = false;
        }else {}

        if(y < x){
            b = false;
        }else{}

        return b;
    }

    /**
     * Will provide feedback for each guess. First generates black pegs and then white pegs
     * @param code the secret code in int form
     * @param nums the current guess in int form
     * @return int array. First element is number of black pegs. Second element is number of white pegs
     */
    public int[] getFeedback(int[] code, int[] nums) {

        int[] tempCode;
        int[] tempNums;
        int i;
        int blackPegs;
        int whitePegs;
        boolean _continue;
        int j;
        int[] result;

        tempCode = new int[4];
        tempNums = new int[4];
        
        i = 0;
        while(i < 4){
            tempCode[i] = code[i];
            tempNums[i] = nums[i];
            i = i + 1;
        }


        blackPegs = 0;
        i = 0;
        
        while(i < code.length) {
            if (this.equal(tempCode[i],tempNums[i])) {
                blackPegs = i+1;
                tempCode[i] = 0-1;
                tempNums[i] = 0-1;
            }else{}
            i = i+1;
        }

        whitePegs = 0;
        i = 0;

        while(i < code.length) {
            if (this.equal(tempCode[i], 0-1)) {
                _continue = true;
            }else{
                _continue = false;
            }
            
            if(!_continue){
                j = 0;
                while(j < code.length) {
                    if (this.equal(tempNums[j], 0-1)) {
                        _continue = true;
                    }else{
                        _continue = false;
                    }

                    if(!_continue){
                        if(this.equal(tempCode[i],tempNums[j])) {
                            whitePegs = whitePegs + 1;
                            tempCode[i] = 0-1;
                            tempNums[j] = 0-1;
                        }else{}
                    }else{}

                    j = j + 1;
                }
            }else{}

            i = i + 1;
        }

        result = new int[2];

        result[0] = blackPegs;
        result[1] = whitePegs;

        return result;
    }

    /**
     * Is called when player loses. This function converts the code in int[] form to string.
     * In other words, it goes the other way as codeToInts.
     * @param codeInInts the code in int[] form
     * @return the secret code as a string
     */
   /* public String codeForPlayAgain(int[] codeInInts) {
        String result = "";
        for (int i=0; i < 4; i++) {
            switch(codeInInts[i]) {
                case 0: {
                    result = result + "Blue, "; break;
                }
                case 1: {
                    result = result + "Green, "; break;
                }
                case 2: {
                    result = result + "Orange, "; break;
                }
                case 3: {
                    result = result + "Purple, "; break;
                }
                case 4: {
                    result = result + "Red, "; break;
                }
                case 5: {
                    result = result + "Yellow, "; break;
                }
            }
        }
        result = result.substring(0, result.length()-2); //to take out the comma at the end
        result = result + ".";
        return result;
    }*/
}